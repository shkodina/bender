
boom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018a  00800100  00001fe2  00002076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080028a  0080028a  00002200  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004ab  00000000  00000000  0000325a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000038f2  00000000  00000000  00003705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001933  00000000  00000000  00006ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002830  00000000  00000000  0000892a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d0  00000000  00000000  0000b15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000885  00000000  00000000  0000b52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ad1  00000000  00000000  0000bdb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007bf  00000000  00000000  0000d882  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  0000e041  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ee       	ldi	r30, 0xE2	; 226
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	aa 38       	cpi	r26, 0x8A	; 138
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	12 e0       	ldi	r17, 0x02	; 2
      b0:	aa e8       	ldi	r26, 0x8A	; 138
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a9 39       	cpi	r26, 0x99	; 153
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 09 05 	call	0xa12	; 0xa12 <main>
      c2:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <portInit>:

//---------------------------------------------------------------

void 	portInit()
{
	LCDPORT = 0b00000000;			LCDDDRPORT = 0b11110111;
      ca:	15 ba       	out	0x15, r1	; 21
      cc:	87 ef       	ldi	r24, 0xF7	; 247
      ce:	84 bb       	out	0x14, r24	; 20
	BUTTONPORT = 0b00000000;		BUTTONDDRPORT = BUTTONDDRPORT | 0b00000000;
      d0:	1b ba       	out	0x1b, r1	; 27
      d2:	8a b3       	in	r24, 0x1a	; 26
      d4:	8a bb       	out	0x1a, r24	; 26
	RELAYPORT = 0b00000000;			RELAYDDRPORT = RELAYDDRPORT | (1 << RELAYPIN1) | (1 << RELAYPIN2);
      d6:	12 ba       	out	0x12, r1	; 18
      d8:	81 b3       	in	r24, 0x11	; 17
      da:	83 60       	ori	r24, 0x03	; 3
      dc:	81 bb       	out	0x11, r24	; 17
	ENCODERPORT = 0b00000000;		ENCODERDDRPORT = ENCODERDDRPORT | 0b00000000;
      de:	10 92 62 00 	sts	0x0062, r1
      e2:	e1 e6       	ldi	r30, 0x61	; 97
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	80 83       	st	Z, r24
	
	PORTE = 0; DDRE = 0b00001100;
      ea:	13 b8       	out	0x03, r1	; 3
      ec:	8c e0       	ldi	r24, 0x0C	; 12
      ee:	82 b9       	out	0x02, r24	; 2
}
      f0:	08 95       	ret

000000f2 <lcdInit>:

//--------------------------------------------------------------

void 	lcdInit()
{
	LCD_Init();
      f2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_Init>
	LCDSendCommand(DISP_ON);
      f6:	8c e0       	ldi	r24, 0x0C	; 12
      f8:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
	LCDSendCommand(CLR_DISP);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
}
     102:	08 95       	ret

00000104 <lcdPrintHello>:

//--------------------------------------------------------------

void	lcdPrintHello()
{
     104:	df 93       	push	r29
     106:	cf 93       	push	r28
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	a2 97       	sbiw	r28, 0x22	; 34
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
	char message1 [LCD_TEXT_LEN] = {' ','H','E','L','L','O','!','!','!',' ',' ',' ',' ',' ',' ',' ',0};
     118:	de 01       	movw	r26, r28
     11a:	11 96       	adiw	r26, 0x01	; 1
     11c:	e0 e7       	ldi	r30, 0x70	; 112
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	81 e1       	ldi	r24, 0x11	; 17
     122:	01 90       	ld	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	81 50       	subi	r24, 0x01	; 1
     128:	e1 f7       	brne	.-8      	; 0x122 <lcdPrintHello+0x1e>
	char message2 [LCD_TEXT_LEN] = {' ','B','E','N','D','E','R',' ','1','.','0',' ',' ',' ',' ',' ',0};
     12a:	de 01       	movw	r26, r28
     12c:	52 96       	adiw	r26, 0x12	; 18
     12e:	ef e5       	ldi	r30, 0x5F	; 95
     130:	f1 e0       	ldi	r31, 0x01	; 1
     132:	81 e1       	ldi	r24, 0x11	; 17
     134:	01 90       	ld	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	e1 f7       	brne	.-8      	; 0x134 <lcdPrintHello+0x30>
	LCDSendCommand(CLR_DISP);
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
	LCDSendCommand(DD_RAM_ADDR);
     142:	80 e8       	ldi	r24, 0x80	; 128
     144:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
	LCDSendTxt(message1);
     148:	ce 01       	movw	r24, r28
     14a:	01 96       	adiw	r24, 0x01	; 1
     14c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCDSendTxt>
	LCDSendCommand(DD_RAM_ADDR2);
     150:	80 ec       	ldi	r24, 0xC0	; 192
     152:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
	LCDSendTxt(message2);
     156:	ce 01       	movw	r24, r28
     158:	42 96       	adiw	r24, 0x12	; 18
     15a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCDSendTxt>
}
     15e:	a2 96       	adiw	r28, 0x22	; 34
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	cf 91       	pop	r28
     16c:	df 91       	pop	r29
     16e:	08 95       	ret

00000170 <lcdPrintCorrection>:

//----------------------------------------------------------------

void 	lcdPrintCorrection(float val)
{
     170:	af 92       	push	r10
     172:	bf 92       	push	r11
     174:	cf 92       	push	r12
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	df 93       	push	r29
     182:	cf 93       	push	r28
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	61 97       	sbiw	r28, 0x11	; 17
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
	char message [LCD_TEXT_LEN] = {'C','o','r','r','e','c','t','.',':',' ',' ',' ',' ',' ',' ',' ',0};
     198:	de 01       	movw	r26, r28
     19a:	11 96       	adiw	r26, 0x01	; 1
     19c:	ee e4       	ldi	r30, 0x4E	; 78
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	81 e1       	ldi	r24, 0x11	; 17
     1a2:	01 90       	ld	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	81 50       	subi	r24, 0x01	; 1
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <lcdPrintCorrection+0x32>
	const char digit_pos = 9;
	LCDSendCommand(CLR_DISP);
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
	if (val >= 0)
     1b0:	c8 01       	movw	r24, r16
     1b2:	b7 01       	movw	r22, r14
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	a9 01       	movw	r20, r18
     1ba:	0e 94 ae 09 	call	0x135c	; 0x135c <__gesf2>
     1be:	9a e0       	ldi	r25, 0x0A	; 10
     1c0:	a9 2e       	mov	r10, r25
     1c2:	b1 2c       	mov	r11, r1
     1c4:	ac 0e       	add	r10, r28
     1c6:	bd 1e       	adc	r11, r29
     1c8:	87 fd       	sbrc	r24, 7
     1ca:	2e c0       	rjmp	.+92     	; 0x228 <lcdPrintCorrection+0xb8>
		sprintf(&message[digit_pos], "%d.%d    ", (int)(val / 1), (int)(val * 10) % 10);
     1cc:	8d b7       	in	r24, 0x3d	; 61
     1ce:	9e b7       	in	r25, 0x3e	; 62
     1d0:	08 97       	sbiw	r24, 0x08	; 8
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	9e bf       	out	0x3e, r25	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	8d bf       	out	0x3d, r24	; 61
     1dc:	cd b6       	in	r12, 0x3d	; 61
     1de:	de b6       	in	r13, 0x3e	; 62
     1e0:	08 94       	sec
     1e2:	c1 1c       	adc	r12, r1
     1e4:	d1 1c       	adc	r13, r1
     1e6:	ed b7       	in	r30, 0x3d	; 61
     1e8:	fe b7       	in	r31, 0x3e	; 62
     1ea:	b2 82       	std	Z+2, r11	; 0x02
     1ec:	a1 82       	std	Z+1, r10	; 0x01
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	f6 01       	movw	r30, r12
     1f4:	93 83       	std	Z+3, r25	; 0x03
     1f6:	82 83       	std	Z+2, r24	; 0x02
     1f8:	c8 01       	movw	r24, r16
     1fa:	b7 01       	movw	r22, r14
     1fc:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     200:	f6 01       	movw	r30, r12
     202:	75 83       	std	Z+5, r23	; 0x05
     204:	64 83       	std	Z+4, r22	; 0x04
     206:	c8 01       	movw	r24, r16
     208:	b7 01       	movw	r22, r14
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e2       	ldi	r20, 0x20	; 32
     210:	51 e4       	ldi	r21, 0x41	; 65
     212:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3>
     216:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     21a:	cb 01       	movw	r24, r22
     21c:	6a e0       	ldi	r22, 0x0A	; 10
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     224:	f6 01       	movw	r30, r12
     226:	3c c0       	rjmp	.+120    	; 0x2a0 <lcdPrintCorrection+0x130>
	else
		sprintf(&message[digit_pos], "-%d.%d    ", (int)((0 - val) / 1), (int)((0 - val) * 10) % 10);	
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	cb 01       	movw	r24, r22
     22e:	a8 01       	movw	r20, r16
     230:	97 01       	movw	r18, r14
     232:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     236:	d6 2e       	mov	r13, r22
     238:	07 2f       	mov	r16, r23
     23a:	18 2f       	mov	r17, r24
     23c:	c9 2e       	mov	r12, r25
     23e:	ed b7       	in	r30, 0x3d	; 61
     240:	fe b7       	in	r31, 0x3e	; 62
     242:	38 97       	sbiw	r30, 0x08	; 8
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	fe bf       	out	0x3e, r31	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	ed bf       	out	0x3d, r30	; 61
     24e:	ed b6       	in	r14, 0x3d	; 61
     250:	fe b6       	in	r15, 0x3e	; 62
     252:	08 94       	sec
     254:	e1 1c       	adc	r14, r1
     256:	f1 1c       	adc	r15, r1
     258:	b2 82       	std	Z+2, r11	; 0x02
     25a:	a1 82       	std	Z+1, r10	; 0x01
     25c:	8a e0       	ldi	r24, 0x0A	; 10
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	f7 01       	movw	r30, r14
     262:	93 83       	std	Z+3, r25	; 0x03
     264:	82 83       	std	Z+2, r24	; 0x02
     266:	2d 2d       	mov	r18, r13
     268:	30 2f       	mov	r19, r16
     26a:	41 2f       	mov	r20, r17
     26c:	5c 2d       	mov	r21, r12
     26e:	ca 01       	movw	r24, r20
     270:	b9 01       	movw	r22, r18
     272:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     276:	f7 01       	movw	r30, r14
     278:	75 83       	std	Z+5, r23	; 0x05
     27a:	64 83       	std	Z+4, r22	; 0x04
     27c:	6d 2d       	mov	r22, r13
     27e:	70 2f       	mov	r23, r16
     280:	81 2f       	mov	r24, r17
     282:	9c 2d       	mov	r25, r12
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e2       	ldi	r20, 0x20	; 32
     28a:	51 e4       	ldi	r21, 0x41	; 65
     28c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3>
     290:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     294:	cb 01       	movw	r24, r22
     296:	6a e0       	ldi	r22, 0x0A	; 10
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     29e:	f7 01       	movw	r30, r14
     2a0:	97 83       	std	Z+7, r25	; 0x07
     2a2:	86 83       	std	Z+6, r24	; 0x06
     2a4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sprintf>
     2a8:	8d b7       	in	r24, 0x3d	; 61
     2aa:	9e b7       	in	r25, 0x3e	; 62
     2ac:	08 96       	adiw	r24, 0x08	; 8
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	9e bf       	out	0x3e, r25	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	8d bf       	out	0x3d, r24	; 61
	LCDSendTxt(message);
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCDSendTxt>
}
     2c0:	61 96       	adiw	r28, 0x11	; 17
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	df 90       	pop	r13
     2da:	cf 90       	pop	r12
     2dc:	bf 90       	pop	r11
     2de:	af 90       	pop	r10
     2e0:	08 95       	ret

000002e2 <lcdPrintFinalAngle>:

//----------------------------------------------------------------

void 	lcdPrintFinalAngle(float val)
{
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	61 97       	sbiw	r28, 0x11	; 17
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	7b 01       	movw	r14, r22
     308:	8c 01       	movw	r16, r24
	char message [LCD_TEXT_LEN] = {'S','E','T',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',0};
     30a:	de 01       	movw	r26, r28
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	ed e3       	ldi	r30, 0x3D	; 61
     310:	f1 e0       	ldi	r31, 0x01	; 1
     312:	81 e1       	ldi	r24, 0x11	; 17
     314:	01 90       	ld	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	81 50       	subi	r24, 0x01	; 1
     31a:	e1 f7       	brne	.-8      	; 0x314 <lcdPrintFinalAngle+0x32>
	const char digit_pos = 5;
	LCDSendCommand(DD_RAM_ADDR);
     31c:	80 e8       	ldi	r24, 0x80	; 128
     31e:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
	if (val >= 0)
     322:	c8 01       	movw	r24, r16
     324:	b7 01       	movw	r22, r14
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	a9 01       	movw	r20, r18
     32c:	0e 94 ae 09 	call	0x135c	; 0x135c <__gesf2>
     330:	26 e0       	ldi	r18, 0x06	; 6
     332:	a2 2e       	mov	r10, r18
     334:	b1 2c       	mov	r11, r1
     336:	ac 0e       	add	r10, r28
     338:	bd 1e       	adc	r11, r29
     33a:	87 fd       	sbrc	r24, 7
     33c:	2e c0       	rjmp	.+92     	; 0x39a <lcdPrintFinalAngle+0xb8>
		sprintf(&message[digit_pos], "%d.%d    ", (int)(val / 1), (int)(val * 10) % 10);
     33e:	8d b7       	in	r24, 0x3d	; 61
     340:	9e b7       	in	r25, 0x3e	; 62
     342:	08 97       	sbiw	r24, 0x08	; 8
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	9e bf       	out	0x3e, r25	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	8d bf       	out	0x3d, r24	; 61
     34e:	cd b6       	in	r12, 0x3d	; 61
     350:	de b6       	in	r13, 0x3e	; 62
     352:	08 94       	sec
     354:	c1 1c       	adc	r12, r1
     356:	d1 1c       	adc	r13, r1
     358:	ed b7       	in	r30, 0x3d	; 61
     35a:	fe b7       	in	r31, 0x3e	; 62
     35c:	b2 82       	std	Z+2, r11	; 0x02
     35e:	a1 82       	std	Z+1, r10	; 0x01
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	f6 01       	movw	r30, r12
     366:	93 83       	std	Z+3, r25	; 0x03
     368:	82 83       	std	Z+2, r24	; 0x02
     36a:	c8 01       	movw	r24, r16
     36c:	b7 01       	movw	r22, r14
     36e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     372:	f6 01       	movw	r30, r12
     374:	75 83       	std	Z+5, r23	; 0x05
     376:	64 83       	std	Z+4, r22	; 0x04
     378:	c8 01       	movw	r24, r16
     37a:	b7 01       	movw	r22, r14
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3>
     388:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     38c:	cb 01       	movw	r24, r22
     38e:	6a e0       	ldi	r22, 0x0A	; 10
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     396:	f6 01       	movw	r30, r12
     398:	3c c0       	rjmp	.+120    	; 0x412 <lcdPrintFinalAngle+0x130>
	else
		sprintf(&message[digit_pos], "-%d.%d    ", (int)((0 - val) / 1), (int)((0 - val) * 10) % 10);	
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	cb 01       	movw	r24, r22
     3a0:	a8 01       	movw	r20, r16
     3a2:	97 01       	movw	r18, r14
     3a4:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     3a8:	d6 2e       	mov	r13, r22
     3aa:	07 2f       	mov	r16, r23
     3ac:	18 2f       	mov	r17, r24
     3ae:	c9 2e       	mov	r12, r25
     3b0:	ed b7       	in	r30, 0x3d	; 61
     3b2:	fe b7       	in	r31, 0x3e	; 62
     3b4:	38 97       	sbiw	r30, 0x08	; 8
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	fe bf       	out	0x3e, r31	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	ed bf       	out	0x3d, r30	; 61
     3c0:	ed b6       	in	r14, 0x3d	; 61
     3c2:	fe b6       	in	r15, 0x3e	; 62
     3c4:	08 94       	sec
     3c6:	e1 1c       	adc	r14, r1
     3c8:	f1 1c       	adc	r15, r1
     3ca:	b2 82       	std	Z+2, r11	; 0x02
     3cc:	a1 82       	std	Z+1, r10	; 0x01
     3ce:	8a e0       	ldi	r24, 0x0A	; 10
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	f7 01       	movw	r30, r14
     3d4:	93 83       	std	Z+3, r25	; 0x03
     3d6:	82 83       	std	Z+2, r24	; 0x02
     3d8:	2d 2d       	mov	r18, r13
     3da:	30 2f       	mov	r19, r16
     3dc:	41 2f       	mov	r20, r17
     3de:	5c 2d       	mov	r21, r12
     3e0:	ca 01       	movw	r24, r20
     3e2:	b9 01       	movw	r22, r18
     3e4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     3e8:	f7 01       	movw	r30, r14
     3ea:	75 83       	std	Z+5, r23	; 0x05
     3ec:	64 83       	std	Z+4, r22	; 0x04
     3ee:	6d 2d       	mov	r22, r13
     3f0:	70 2f       	mov	r23, r16
     3f2:	81 2f       	mov	r24, r17
     3f4:	9c 2d       	mov	r25, r12
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e2       	ldi	r20, 0x20	; 32
     3fc:	51 e4       	ldi	r21, 0x41	; 65
     3fe:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3>
     402:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     406:	cb 01       	movw	r24, r22
     408:	6a e0       	ldi	r22, 0x0A	; 10
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     410:	f7 01       	movw	r30, r14
     412:	97 83       	std	Z+7, r25	; 0x07
     414:	86 83       	std	Z+6, r24	; 0x06
     416:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sprintf>
     41a:	8d b7       	in	r24, 0x3d	; 61
     41c:	9e b7       	in	r25, 0x3e	; 62
     41e:	08 96       	adiw	r24, 0x08	; 8
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	9e bf       	out	0x3e, r25	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	8d bf       	out	0x3d, r24	; 61
	LCDSendTxt(message);
     42a:	ce 01       	movw	r24, r28
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCDSendTxt>
}
     432:	61 96       	adiw	r28, 0x11	; 17
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	cf 90       	pop	r12
     44e:	bf 90       	pop	r11
     450:	af 90       	pop	r10
     452:	08 95       	ret

00000454 <lcdPrintCurrentlAngle>:

//----------------------------------------------------------------

void 	lcdPrintCurrentlAngle(float val)
{
     454:	af 92       	push	r10
     456:	bf 92       	push	r11
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	61 97       	sbiw	r28, 0x11	; 17
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	7b 01       	movw	r14, r22
     47a:	8c 01       	movw	r16, r24
	char message [LCD_TEXT_LEN] = {'C','U','R',':',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',0};
     47c:	de 01       	movw	r26, r28
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	ec e2       	ldi	r30, 0x2C	; 44
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	81 e1       	ldi	r24, 0x11	; 17
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	e1 f7       	brne	.-8      	; 0x486 <lcdPrintCurrentlAngle+0x32>
	const char digit_pos = 5;
	LCDSendCommand(DD_RAM_ADDR2);
     48e:	80 ec       	ldi	r24, 0xC0	; 192
     490:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
	if (val >= 0)
     494:	c8 01       	movw	r24, r16
     496:	b7 01       	movw	r22, r14
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	a9 01       	movw	r20, r18
     49e:	0e 94 ae 09 	call	0x135c	; 0x135c <__gesf2>
     4a2:	36 e0       	ldi	r19, 0x06	; 6
     4a4:	a3 2e       	mov	r10, r19
     4a6:	b1 2c       	mov	r11, r1
     4a8:	ac 0e       	add	r10, r28
     4aa:	bd 1e       	adc	r11, r29
     4ac:	87 fd       	sbrc	r24, 7
     4ae:	2e c0       	rjmp	.+92     	; 0x50c <lcdPrintCurrentlAngle+0xb8>
		sprintf(&message[digit_pos], "%d.%d    ", (int)(val / 1), (int)(val * 10) % 10);
     4b0:	8d b7       	in	r24, 0x3d	; 61
     4b2:	9e b7       	in	r25, 0x3e	; 62
     4b4:	08 97       	sbiw	r24, 0x08	; 8
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	9e bf       	out	0x3e, r25	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	8d bf       	out	0x3d, r24	; 61
     4c0:	cd b6       	in	r12, 0x3d	; 61
     4c2:	de b6       	in	r13, 0x3e	; 62
     4c4:	08 94       	sec
     4c6:	c1 1c       	adc	r12, r1
     4c8:	d1 1c       	adc	r13, r1
     4ca:	ed b7       	in	r30, 0x3d	; 61
     4cc:	fe b7       	in	r31, 0x3e	; 62
     4ce:	b2 82       	std	Z+2, r11	; 0x02
     4d0:	a1 82       	std	Z+1, r10	; 0x01
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	f6 01       	movw	r30, r12
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
     4dc:	c8 01       	movw	r24, r16
     4de:	b7 01       	movw	r22, r14
     4e0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     4e4:	f6 01       	movw	r30, r12
     4e6:	75 83       	std	Z+5, r23	; 0x05
     4e8:	64 83       	std	Z+4, r22	; 0x04
     4ea:	c8 01       	movw	r24, r16
     4ec:	b7 01       	movw	r22, r14
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e2       	ldi	r20, 0x20	; 32
     4f4:	51 e4       	ldi	r21, 0x41	; 65
     4f6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3>
     4fa:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     4fe:	cb 01       	movw	r24, r22
     500:	6a e0       	ldi	r22, 0x0A	; 10
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     508:	f6 01       	movw	r30, r12
     50a:	3c c0       	rjmp	.+120    	; 0x584 <lcdPrintCurrentlAngle+0x130>
	else
		sprintf(&message[digit_pos], "-%d.%d    ", (int)((0 - val) / 1), (int)((0 - val) * 10) % 10);	
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	cb 01       	movw	r24, r22
     512:	a8 01       	movw	r20, r16
     514:	97 01       	movw	r18, r14
     516:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     51a:	d6 2e       	mov	r13, r22
     51c:	07 2f       	mov	r16, r23
     51e:	18 2f       	mov	r17, r24
     520:	c9 2e       	mov	r12, r25
     522:	ed b7       	in	r30, 0x3d	; 61
     524:	fe b7       	in	r31, 0x3e	; 62
     526:	38 97       	sbiw	r30, 0x08	; 8
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	fe bf       	out	0x3e, r31	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	ed bf       	out	0x3d, r30	; 61
     532:	ed b6       	in	r14, 0x3d	; 61
     534:	fe b6       	in	r15, 0x3e	; 62
     536:	08 94       	sec
     538:	e1 1c       	adc	r14, r1
     53a:	f1 1c       	adc	r15, r1
     53c:	b2 82       	std	Z+2, r11	; 0x02
     53e:	a1 82       	std	Z+1, r10	; 0x01
     540:	8a e0       	ldi	r24, 0x0A	; 10
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	f7 01       	movw	r30, r14
     546:	93 83       	std	Z+3, r25	; 0x03
     548:	82 83       	std	Z+2, r24	; 0x02
     54a:	2d 2d       	mov	r18, r13
     54c:	30 2f       	mov	r19, r16
     54e:	41 2f       	mov	r20, r17
     550:	5c 2d       	mov	r21, r12
     552:	ca 01       	movw	r24, r20
     554:	b9 01       	movw	r22, r18
     556:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     55a:	f7 01       	movw	r30, r14
     55c:	75 83       	std	Z+5, r23	; 0x05
     55e:	64 83       	std	Z+4, r22	; 0x04
     560:	6d 2d       	mov	r22, r13
     562:	70 2f       	mov	r23, r16
     564:	81 2f       	mov	r24, r17
     566:	9c 2d       	mov	r25, r12
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e2       	ldi	r20, 0x20	; 32
     56e:	51 e4       	ldi	r21, 0x41	; 65
     570:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3>
     574:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     578:	cb 01       	movw	r24, r22
     57a:	6a e0       	ldi	r22, 0x0A	; 10
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     582:	f7 01       	movw	r30, r14
     584:	97 83       	std	Z+7, r25	; 0x07
     586:	86 83       	std	Z+6, r24	; 0x06
     588:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sprintf>
     58c:	8d b7       	in	r24, 0x3d	; 61
     58e:	9e b7       	in	r25, 0x3e	; 62
     590:	08 96       	adiw	r24, 0x08	; 8
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	9e bf       	out	0x3e, r25	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	8d bf       	out	0x3d, r24	; 61
	LCDSendTxt(message);
     59c:	ce 01       	movw	r24, r28
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <LCDSendTxt>
}
     5a4:	61 96       	adiw	r28, 0x11	; 17
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	08 95       	ret

000005c6 <changeAimAngle>:
}

//---------------------------------------------------------------

void 	changeAimAngle(char button)
{
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
	float step = gl_aim_angle_delta;
     5ce:	50 91 19 01 	lds	r21, 0x0119
     5d2:	40 91 1a 01 	lds	r20, 0x011A
     5d6:	30 91 1b 01 	lds	r19, 0x011B
     5da:	20 91 1c 01 	lds	r18, 0x011C


	if( button == BUTTON_MINUS)	{
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	79 f4       	brne	.+30     	; 0x600 <changeAimAngle+0x3a>
		step = 0 - gl_aim_angle_delta;
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	cb 01       	movw	r24, r22
     5e8:	da 01       	movw	r26, r20
     5ea:	f9 01       	movw	r30, r18
     5ec:	2b 2f       	mov	r18, r27
     5ee:	3a 2f       	mov	r19, r26
     5f0:	4f 2f       	mov	r20, r31
     5f2:	5e 2f       	mov	r21, r30
     5f4:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     5f8:	56 2f       	mov	r21, r22
     5fa:	47 2f       	mov	r20, r23
     5fc:	38 2f       	mov	r19, r24
     5fe:	29 2f       	mov	r18, r25
	}

	gl_aim_entered_angle += step;
     600:	da 01       	movw	r26, r20
     602:	f9 01       	movw	r30, r18
     604:	6b 2f       	mov	r22, r27
     606:	74 2f       	mov	r23, r20
     608:	8f 2f       	mov	r24, r31
     60a:	92 2f       	mov	r25, r18
     60c:	20 91 1d 01 	lds	r18, 0x011D
     610:	30 91 1e 01 	lds	r19, 0x011E
     614:	40 91 1f 01 	lds	r20, 0x011F
     618:	50 91 20 01 	lds	r21, 0x0120
     61c:	0e 94 f6 07 	call	0xfec	; 0xfec <__addsf3>
     620:	7b 01       	movw	r14, r22
     622:	8c 01       	movw	r16, r24
     624:	86 2f       	mov	r24, r22
     626:	9f 2d       	mov	r25, r15
     628:	a0 2f       	mov	r26, r16
     62a:	b1 2f       	mov	r27, r17
     62c:	80 93 1d 01 	sts	0x011D, r24
     630:	90 93 1e 01 	sts	0x011E, r25
     634:	a0 93 1f 01 	sts	0x011F, r26
     638:	b0 93 20 01 	sts	0x0120, r27
	gl_aim_angle = gl_aim_entered_angle + gl_correction;
     63c:	6e 2d       	mov	r22, r14
     63e:	7f 2d       	mov	r23, r15
     640:	80 2f       	mov	r24, r16
     642:	91 2f       	mov	r25, r17
     644:	20 91 8e 02 	lds	r18, 0x028E
     648:	30 91 8f 02 	lds	r19, 0x028F
     64c:	40 91 90 02 	lds	r20, 0x0290
     650:	50 91 91 02 	lds	r21, 0x0291
     654:	0e 94 f6 07 	call	0xfec	; 0xfec <__addsf3>
     658:	60 93 15 01 	sts	0x0115, r22
     65c:	70 93 16 01 	sts	0x0116, r23
     660:	80 93 17 01 	sts	0x0117, r24
     664:	90 93 18 01 	sts	0x0118, r25
	lcdPrintFinalAngle(gl_aim_entered_angle);
     668:	6e 2d       	mov	r22, r14
     66a:	7f 2d       	mov	r23, r15
     66c:	80 2f       	mov	r24, r16
     66e:	91 2f       	mov	r25, r17
     670:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcdPrintFinalAngle>
}
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	08 95       	ret

0000067e <changeCorrection>:

//---------------------------------------------------------------

void 	changeCorrection(char button)
{
	float step = gl_correction_step;
     67e:	50 91 25 01 	lds	r21, 0x0125
     682:	40 91 26 01 	lds	r20, 0x0126
     686:	30 91 27 01 	lds	r19, 0x0127
     68a:	20 91 28 01 	lds	r18, 0x0128

	if( button == BUTTON_MINUS)	{
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	79 f4       	brne	.+30     	; 0x6b0 <changeCorrection+0x32>
		step = 0 - gl_correction_step;
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	cb 01       	movw	r24, r22
     698:	da 01       	movw	r26, r20
     69a:	f9 01       	movw	r30, r18
     69c:	2b 2f       	mov	r18, r27
     69e:	3a 2f       	mov	r19, r26
     6a0:	4f 2f       	mov	r20, r31
     6a2:	5e 2f       	mov	r21, r30
     6a4:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     6a8:	56 2f       	mov	r21, r22
     6aa:	47 2f       	mov	r20, r23
     6ac:	38 2f       	mov	r19, r24
     6ae:	29 2f       	mov	r18, r25
	}

	gl_correction += step;
     6b0:	da 01       	movw	r26, r20
     6b2:	f9 01       	movw	r30, r18
     6b4:	6b 2f       	mov	r22, r27
     6b6:	74 2f       	mov	r23, r20
     6b8:	8f 2f       	mov	r24, r31
     6ba:	92 2f       	mov	r25, r18
     6bc:	20 91 8e 02 	lds	r18, 0x028E
     6c0:	30 91 8f 02 	lds	r19, 0x028F
     6c4:	40 91 90 02 	lds	r20, 0x0290
     6c8:	50 91 91 02 	lds	r21, 0x0291
     6cc:	0e 94 f6 07 	call	0xfec	; 0xfec <__addsf3>
     6d0:	26 2f       	mov	r18, r22
     6d2:	37 2f       	mov	r19, r23
     6d4:	48 2f       	mov	r20, r24
     6d6:	59 2f       	mov	r21, r25
     6d8:	20 93 8e 02 	sts	0x028E, r18
     6dc:	30 93 8f 02 	sts	0x028F, r19
     6e0:	40 93 90 02 	sts	0x0290, r20
     6e4:	50 93 91 02 	sts	0x0291, r21
	lcdPrintCorrection(gl_correction);
     6e8:	0e 94 b8 00 	call	0x170	; 0x170 <lcdPrintCorrection>
}
     6ec:	08 95       	ret

000006ee <setRelay>:

//----------------------------------------------------------------

char 	setRelay(char relay_state)
{
	if ( relay_state == RELAY_ON ){
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	19 f4       	brne	.+6      	; 0x6f8 <setRelay+0xa>
		UPBIT(RELAYPORT, RELAYPIN1);
     6f2:	90 9a       	sbi	0x12, 0	; 18
		DOWNBIT(RELAYPORT, RELAYPIN2);
     6f4:	91 98       	cbi	0x12, 1	; 18
     6f6:	08 95       	ret
	}
	else{
		DOWNBIT(RELAYPORT, RELAYPIN1);
     6f8:	90 98       	cbi	0x12, 0	; 18
		UPBIT(RELAYPORT, RELAYPIN2);
     6fa:	91 9a       	sbi	0x12, 1	; 18
	}
}
     6fc:	08 95       	ret

000006fe <getCurAngle>:

//-----------------------------------------------------------------

float 	getCurAngle()
{
     6fe:	df 93       	push	r29
     700:	cf 93       	push	r28
     702:	00 d0       	rcall	.+0      	; 0x704 <getCurAngle+0x6>
     704:	00 d0       	rcall	.+0      	; 0x706 <getCurAngle+0x8>
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62

	long enc_val = 0;
     70a:	19 82       	std	Y+1, r1	; 0x01
     70c:	1a 82       	std	Y+2, r1	; 0x02
     70e:	1b 82       	std	Y+3, r1	; 0x03
     710:	1c 82       	std	Y+4, r1	; 0x04
	char * enc_val_p = &enc_val;
	*enc_val_p = (ENCODERPIN ^ 0xFF ) & ENCODERPINMASK;
     712:	80 b1       	in	r24, 0x00	; 0
     714:	80 95       	com	r24
     716:	89 83       	std	Y+1, r24	; 0x01
	enc_val_p++;
	*enc_val_p = (ENCODERPIN2 ^ 0xFF) & ENCODERPIN2MASK;
     718:	89 b3       	in	r24, 0x19	; 25
     71a:	80 95       	com	r24
     71c:	83 70       	andi	r24, 0x03	; 3
     71e:	8a 83       	std	Y+2, r24	; 0x02



	float angle = (360.0 / DIMENTION ) * enc_val;
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	7a 81       	ldd	r23, Y+2	; 0x02
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	0e 94 0e 0a 	call	0x141c	; 0x141c <__floatsisf>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	44 eb       	ldi	r20, 0xB4	; 180
     732:	5e e3       	ldi	r21, 0x3E	; 62
     734:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__mulsf3>
	return angle;
}
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	cf 91       	pop	r28
     742:	df 91       	pop	r29
     744:	08 95       	ret

00000746 <angleControl>:
}

//---------------------------------------------------------------

void 	angleControl()
{
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
	float cuurent_angle = getCurAngle(); 
     74e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <getCurAngle>
     752:	7b 01       	movw	r14, r22
     754:	8c 01       	movw	r16, r24
	
	// controll angle up
	while ( cuurent_angle <= gl_aim_angle ) {
     756:	0e c0       	rjmp	.+28     	; 0x774 <angleControl+0x2e>
		lcdPrintCurrentlAngle (cuurent_angle);
     758:	c8 01       	movw	r24, r16
     75a:	b7 01       	movw	r22, r14
     75c:	0e 94 2a 02 	call	0x454	; 0x454 <lcdPrintCurrentlAngle>
		cuurent_angle = getCurAngle(); 
     760:	0e 94 7f 03 	call	0x6fe	; 0x6fe <getCurAngle>
     764:	7b 01       	movw	r14, r22
     766:	8c 01       	movw	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     768:	87 ea       	ldi	r24, 0xA7	; 167
     76a:	91 e6       	ldi	r25, 0x61	; 97
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <angleControl+0x26>
     770:	00 c0       	rjmp	.+0      	; 0x772 <angleControl+0x2c>
     772:	00 00       	nop
void 	angleControl()
{
	float cuurent_angle = getCurAngle(); 
	
	// controll angle up
	while ( cuurent_angle <= gl_aim_angle ) {
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	20 91 15 01 	lds	r18, 0x0115
     77c:	30 91 16 01 	lds	r19, 0x0116
     780:	40 91 17 01 	lds	r20, 0x0117
     784:	50 91 18 01 	lds	r21, 0x0118
     788:	0e 94 de 09 	call	0x13bc	; 0x13bc <__lesf2>
     78c:	18 16       	cp	r1, r24
     78e:	24 f7       	brge	.-56     	; 0x758 <angleControl+0x12>
		lcdPrintCurrentlAngle (cuurent_angle);
		cuurent_angle = getCurAngle(); 
		_delay_ms(100);
	}
	
	setRelay(RELAY_ON);
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	0e 94 77 03 	call	0x6ee	; 0x6ee <setRelay>

	// controll angle down
	while ( cuurent_angle > gl_zerro_angle ) {
     796:	0e c0       	rjmp	.+28     	; 0x7b4 <angleControl+0x6e>
		lcdPrintCurrentlAngle (cuurent_angle);
     798:	c8 01       	movw	r24, r16
     79a:	b7 01       	movw	r22, r14
     79c:	0e 94 2a 02 	call	0x454	; 0x454 <lcdPrintCurrentlAngle>
		cuurent_angle = getCurAngle(); 
     7a0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <getCurAngle>
     7a4:	7b 01       	movw	r14, r22
     7a6:	8c 01       	movw	r16, r24
     7a8:	87 ea       	ldi	r24, 0xA7	; 167
     7aa:	91 e6       	ldi	r25, 0x61	; 97
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <angleControl+0x66>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <angleControl+0x6c>
     7b2:	00 00       	nop
	}
	
	setRelay(RELAY_ON);

	// controll angle down
	while ( cuurent_angle > gl_zerro_angle ) {
     7b4:	c8 01       	movw	r24, r16
     7b6:	b7 01       	movw	r22, r14
     7b8:	20 91 8a 02 	lds	r18, 0x028A
     7bc:	30 91 8b 02 	lds	r19, 0x028B
     7c0:	40 91 8c 02 	lds	r20, 0x028C
     7c4:	50 91 8d 02 	lds	r21, 0x028D
     7c8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__gtsf2>
     7cc:	18 16       	cp	r1, r24
     7ce:	24 f3       	brlt	.-56     	; 0x798 <angleControl+0x52>
		lcdPrintCurrentlAngle (cuurent_angle);
		cuurent_angle = getCurAngle(); 
		_delay_ms(100);
	}
	
	setRelay(RELAY_OFF);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 77 03 	call	0x6ee	; 0x6ee <setRelay>
}
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	08 95       	ret

000007e0 <isInWork>:
}

//----------------------------------------------------------------

char 	isInWork()
{
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
	static float last_angle = DEFAULTE_ZERRO_ANGLE;
	float cuurent_angle = getCurAngle();
     7e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <getCurAngle>
     7ec:	7b 01       	movw	r14, r22
     7ee:	8c 01       	movw	r16, r24

	if ( cuurent_angle != last_angle){
     7f0:	20 91 95 02 	lds	r18, 0x0295
     7f4:	30 91 96 02 	lds	r19, 0x0296
     7f8:	40 91 97 02 	lds	r20, 0x0297
     7fc:	50 91 98 02 	lds	r21, 0x0298
     800:	0e 94 4e 09 	call	0x129c	; 0x129c <__nesf2>
     804:	88 23       	and	r24, r24
     806:	61 f0       	breq	.+24     	; 0x820 <isInWork+0x40>
		lcdPrintCurrentlAngle (cuurent_angle);
     808:	c8 01       	movw	r24, r16
     80a:	b7 01       	movw	r22, r14
     80c:	0e 94 2a 02 	call	0x454	; 0x454 <lcdPrintCurrentlAngle>
		last_angle = cuurent_angle;	
     810:	e0 92 95 02 	sts	0x0295, r14
     814:	f0 92 96 02 	sts	0x0296, r15
     818:	00 93 97 02 	sts	0x0297, r16
     81c:	10 93 98 02 	sts	0x0298, r17
	}

//	if ( cuurent_angle > (gl_zerro_angle + gl_zerro_angle_delta) && last_angle != cuurent_angle ){
	if ( cuurent_angle > (gl_zerro_angle + gl_zerro_angle_delta)){
     820:	60 91 8a 02 	lds	r22, 0x028A
     824:	70 91 8b 02 	lds	r23, 0x028B
     828:	80 91 8c 02 	lds	r24, 0x028C
     82c:	90 91 8d 02 	lds	r25, 0x028D
     830:	20 91 21 01 	lds	r18, 0x0121
     834:	30 91 22 01 	lds	r19, 0x0122
     838:	40 91 23 01 	lds	r20, 0x0123
     83c:	50 91 24 01 	lds	r21, 0x0124
     840:	0e 94 f6 07 	call	0xfec	; 0xfec <__addsf3>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	c8 01       	movw	r24, r16
     84a:	b7 01       	movw	r22, r14
     84c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__gtsf2>
     850:	18 16       	cp	r1, r24
     852:	54 f4       	brge	.+20     	; 0x868 <isInWork+0x88>
		last_angle = cuurent_angle;
     854:	e0 92 95 02 	sts	0x0295, r14
     858:	f0 92 96 02 	sts	0x0296, r15
     85c:	00 93 97 02 	sts	0x0297, r16
     860:	10 93 98 02 	sts	0x0298, r17
		return 1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	01 c0       	rjmp	.+2      	; 0x86a <isInWork+0x8a>
	}
	return 0;	
     868:	80 e0       	ldi	r24, 0x00	; 0
}
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	08 95       	ret

00000874 <getButton>:
}

//-----------------------------------------------------------------

char 	getButton(char * button_code)
{
     874:	fc 01       	movw	r30, r24
	
	static char button_plus_pressed_cicles = 0;
	static char button_minus_pressed_cicles = 0;
	const char button_pressed_cicles_max = 35;
	
	char but_port_state = BUTTONPIN;
     876:	89 b3       	in	r24, 0x19	; 25

	INVBIT (but_port_state, BUTTON_PLUS_PIN);
	INVBIT (but_port_state, BUTTON_MINUS_PIN);
	INVBIT (but_port_state, BUTTON_CORRECTION_PIN);
     878:	80 95       	com	r24
     87a:	8c 71       	andi	r24, 0x1C	; 28


	// check button plus
	if (but_port_state & (1 << BUTTON_PLUS_PIN)) {
     87c:	82 ff       	sbrs	r24, 2
     87e:	17 c0       	rjmp	.+46     	; 0x8ae <getButton+0x3a>
		if (button_plus_was_released){
     880:	90 91 2b 01 	lds	r25, 0x012B
     884:	99 23       	and	r25, r25
     886:	19 f0       	breq	.+6      	; 0x88e <getButton+0x1a>
			button_plus_was_released = 0;
     888:	10 92 2b 01 	sts	0x012B, r1
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <getButton+0x36>
			* button_code = BUTTON_PLUS;		
			return * button_code;
		}else{
			if (button_plus_pressed_cicles++ > button_pressed_cicles_max){
     88e:	90 91 94 02 	lds	r25, 0x0294
     892:	29 2f       	mov	r18, r25
     894:	2f 5f       	subi	r18, 0xFF	; 255
     896:	20 93 94 02 	sts	0x0294, r18
     89a:	94 32       	cpi	r25, 0x24	; 36
     89c:	68 f0       	brcs	.+26     	; 0x8b8 <getButton+0x44>
     89e:	87 ea       	ldi	r24, 0xA7	; 167
     8a0:	91 e6       	ldi	r25, 0x61	; 97
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <getButton+0x2e>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <getButton+0x34>
     8a8:	00 00       	nop
				_delay_ms(100);
				* button_code = BUTTON_PLUS;		
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	30 c0       	rjmp	.+96     	; 0x90e <getButton+0x9a>
				return * button_code;
			}
		}
	}else{
		button_plus_was_released = 1;
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	90 93 2b 01 	sts	0x012B, r25
		button_plus_pressed_cicles = 0;
     8b4:	10 92 94 02 	sts	0x0294, r1
	}	

	// check button minus
	if (but_port_state & (1 << BUTTON_MINUS_PIN)) {
     8b8:	83 ff       	sbrs	r24, 3
     8ba:	17 c0       	rjmp	.+46     	; 0x8ea <getButton+0x76>
		if (button_minus_was_released){
     8bc:	90 91 2a 01 	lds	r25, 0x012A
     8c0:	99 23       	and	r25, r25
     8c2:	19 f0       	breq	.+6      	; 0x8ca <getButton+0x56>
			button_minus_was_released = 0;
     8c4:	10 92 2a 01 	sts	0x012A, r1
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <getButton+0x72>
			* button_code = BUTTON_MINUS;		
			return * button_code;		
		}else{
			if (button_minus_pressed_cicles++ > button_pressed_cicles_max){
     8ca:	90 91 93 02 	lds	r25, 0x0293
     8ce:	29 2f       	mov	r18, r25
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	20 93 93 02 	sts	0x0293, r18
     8d6:	94 32       	cpi	r25, 0x24	; 36
     8d8:	68 f0       	brcs	.+26     	; 0x8f4 <getButton+0x80>
     8da:	87 ea       	ldi	r24, 0xA7	; 167
     8dc:	91 e6       	ldi	r25, 0x61	; 97
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <getButton+0x6a>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <getButton+0x70>
     8e4:	00 00       	nop
				_delay_ms(100);
				* button_code = BUTTON_MINUS;		
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	12 c0       	rjmp	.+36     	; 0x90e <getButton+0x9a>
				return * button_code;
			}
		}
	}else{
		button_minus_was_released = 1;
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	90 93 2a 01 	sts	0x012A, r25
		button_minus_pressed_cicles = 0;
     8f0:	10 92 93 02 	sts	0x0293, r1
	}	
	
	// check button correction
	if (but_port_state & (1 << BUTTON_CORRECTION_PIN)) {
     8f4:	84 ff       	sbrs	r24, 4
     8f6:	0d c0       	rjmp	.+26     	; 0x912 <getButton+0x9e>
		if (button_corr_was_released){
     8f8:	80 91 29 01 	lds	r24, 0x0129
     8fc:	88 23       	and	r24, r24
     8fe:	61 f0       	breq	.+24     	; 0x918 <getButton+0xa4>
			INVBIT(PORTE,5);
     900:	83 b1       	in	r24, 0x03	; 3
     902:	90 e2       	ldi	r25, 0x20	; 32
     904:	89 27       	eor	r24, r25
     906:	83 b9       	out	0x03, r24	; 3
			button_corr_was_released = 0;
     908:	10 92 29 01 	sts	0x0129, r1
			* button_code = BUTTON_CORRECTION;		
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	80 83       	st	Z, r24
			return * button_code;
     910:	08 95       	ret
		}
	}else{
		button_corr_was_released = 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 29 01 	sts	0x0129, r24
	}	
	
	* button_code = BUTTON_NONE;
     918:	10 82       	st	Z, r1
	return * button_code;
     91a:	80 e0       	ldi	r24, 0x00	; 0
}
     91c:	08 95       	ret

0000091e <setCorrection>:
}

//---------------------------------------------------------------

void 	setCorrection()
{
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	0f 92       	push	r0
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
	lcdPrintCorrection(gl_correction);
     934:	60 91 8e 02 	lds	r22, 0x028E
     938:	70 91 8f 02 	lds	r23, 0x028F
     93c:	80 91 90 02 	lds	r24, 0x0290
     940:	90 91 91 02 	lds	r25, 0x0291
     944:	0e 94 b8 00 	call	0x170	; 0x170 <lcdPrintCorrection>

	const long WAITEXIT = 500;
	long wait_exit = WAITEXIT;
	char sbutton = 0;
     948:	19 82       	std	Y+1, r1	; 0x01
void 	setCorrection()
{
	lcdPrintCorrection(gl_correction);

	const long WAITEXIT = 500;
	long wait_exit = WAITEXIT;
     94a:	84 ef       	ldi	r24, 0xF4	; 244
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
	char sbutton = 0;
	while (wait_exit--)
	{

		char t = getButton(& sbutton);
     952:	6e 01       	movw	r12, r28
     954:	08 94       	sec
     956:	c1 1c       	adc	r12, r1
     958:	d1 1c       	adc	r13, r1
	lcdPrintCorrection(gl_correction);

	const long WAITEXIT = 500;
	long wait_exit = WAITEXIT;
	char sbutton = 0;
	while (wait_exit--)
     95a:	1c c0       	rjmp	.+56     	; 0x994 <setCorrection+0x76>
	{

		char t = getButton(& sbutton);
     95c:	c6 01       	movw	r24, r12
     95e:	0e 94 3a 04 	call	0x874	; 0x874 <getButton>
		if(t)
     962:	88 23       	and	r24, r24
     964:	79 f0       	breq	.+30     	; 0x984 <setCorrection+0x66>
		{
			switch (t)
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	68 f0       	brcs	.+26     	; 0x984 <setCorrection+0x66>
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	18 f0       	brcs	.+6      	; 0x974 <setCorrection+0x56>
     96e:	83 30       	cpi	r24, 0x03	; 3
     970:	49 f4       	brne	.+18     	; 0x984 <setCorrection+0x66>
     972:	1b c0       	rjmp	.+54     	; 0x9aa <setCorrection+0x8c>
					lcdPrintCurrentlAngle(getCurAngle());
					return;
					break;			
				case BUTTON_PLUS:
				case BUTTON_MINUS:
					changeCorrection(t);
     974:	0e 94 3f 03 	call	0x67e	; 0x67e <changeCorrection>
					wait_exit = WAITEXIT;
     978:	44 ef       	ldi	r20, 0xF4	; 244
     97a:	e4 2e       	mov	r14, r20
     97c:	41 e0       	ldi	r20, 0x01	; 1
     97e:	f4 2e       	mov	r15, r20
     980:	01 2d       	mov	r16, r1
     982:	11 2d       	mov	r17, r1
     984:	83 ec       	ldi	r24, 0xC3	; 195
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <setCorrection+0x6a>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <setCorrection+0x70>
     98e:	00 00       	nop
     990:	d8 01       	movw	r26, r16
     992:	c7 01       	movw	r24, r14
	lcdPrintCorrection(gl_correction);

	const long WAITEXIT = 500;
	long wait_exit = WAITEXIT;
	char sbutton = 0;
	while (wait_exit--)
     994:	7c 01       	movw	r14, r24
     996:	8d 01       	movw	r16, r26
     998:	08 94       	sec
     99a:	e1 08       	sbc	r14, r1
     99c:	f1 08       	sbc	r15, r1
     99e:	01 09       	sbc	r16, r1
     9a0:	11 09       	sbc	r17, r1
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	c9 f6       	brne	.-78     	; 0x95c <setCorrection+0x3e>
			}
		}
		_delay_ms(10);
	}

	lcdPrintFinalAngle(gl_aim_entered_angle);
     9aa:	60 91 1d 01 	lds	r22, 0x011D
     9ae:	70 91 1e 01 	lds	r23, 0x011E
     9b2:	80 91 1f 01 	lds	r24, 0x011F
     9b6:	90 91 20 01 	lds	r25, 0x0120
     9ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcdPrintFinalAngle>
	lcdPrintCurrentlAngle(getCurAngle());
     9be:	0e 94 7f 03 	call	0x6fe	; 0x6fe <getCurAngle>
     9c2:	0e 94 2a 02 	call	0x454	; 0x454 <lcdPrintCurrentlAngle>
	return;
}
     9c6:	0f 90       	pop	r0
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	08 95       	ret

000009da <workWithUser>:
}

//---------------------------------------------------------------

void workWithUser()
{
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	0f 92       	push	r0
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
	char button = 0;
     9e4:	19 82       	std	Y+1, r1	; 0x01

	if(getButton(& button))
     9e6:	ce 01       	movw	r24, r28
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	0e 94 3a 04 	call	0x874	; 0x874 <getButton>
     9ee:	88 23       	and	r24, r24
     9f0:	61 f0       	breq	.+24     	; 0xa0a <workWithUser+0x30>
	{
		switch (button)
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	48 f0       	brcs	.+18     	; 0xa0a <workWithUser+0x30>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	28 f0       	brcs	.+10     	; 0xa06 <workWithUser+0x2c>
     9fc:	83 30       	cpi	r24, 0x03	; 3
     9fe:	29 f4       	brne	.+10     	; 0xa0a <workWithUser+0x30>
		{
			case BUTTON_CORRECTION:
				setCorrection();
     a00:	0e 94 8f 04 	call	0x91e	; 0x91e <setCorrection>
				break;			
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <workWithUser+0x30>
			case BUTTON_PLUS:
			case BUTTON_MINUS:
				changeAimAngle(button);
     a06:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <changeAimAngle>
				break;
			default:
				break;
		}
	}
}
     a0a:	0f 90       	pop	r0
     a0c:	cf 91       	pop	r28
     a0e:	df 91       	pop	r29
     a10:	08 95       	ret

00000a12 <main>:



int 	main()
{
	portInit();
     a12:	0e 94 65 00 	call	0xca	; 0xca <portInit>
	lcdInit();
     a16:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdInit>
	lcdPrintHello();
     a1a:	0e 94 82 00 	call	0x104	; 0x104 <lcdPrintHello>
     a1e:	8f eb       	ldi	r24, 0xBF	; 191
     a20:	97 e2       	ldi	r25, 0x27	; 39
     a22:	a9 e0       	ldi	r26, 0x09	; 9
     a24:	81 50       	subi	r24, 0x01	; 1
     a26:	90 40       	sbci	r25, 0x00	; 0
     a28:	a0 40       	sbci	r26, 0x00	; 0
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <main+0x12>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <main+0x1c>
     a2e:	00 00       	nop

	_delay_ms(3000);
	
	lcdPrintFinalAngle(gl_aim_entered_angle);
     a30:	60 91 1d 01 	lds	r22, 0x011D
     a34:	70 91 1e 01 	lds	r23, 0x011E
     a38:	80 91 1f 01 	lds	r24, 0x011F
     a3c:	90 91 20 01 	lds	r25, 0x0120
     a40:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcdPrintFinalAngle>
	lcdPrintCurrentlAngle(getCurAngle());
     a44:	0e 94 7f 03 	call	0x6fe	; 0x6fe <getCurAngle>
     a48:	0e 94 2a 02 	call	0x454	; 0x454 <lcdPrintCurrentlAngle>
*/


	while (1) 
	{
		if (isInWork())
     a4c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <isInWork>
     a50:	88 23       	and	r24, r24
     a52:	19 f0       	breq	.+6      	; 0xa5a <main+0x48>
		{
			angleControl();
     a54:	0e 94 a3 03 	call	0x746	; 0x746 <angleControl>
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <main+0x4c>
		}
		else
		{
			workWithUser();
     a5a:	0e 94 ed 04 	call	0x9da	; 0x9da <workWithUser>
     a5e:	a3 ec       	ldi	r26, 0xC3	; 195
     a60:	b9 e0       	ldi	r27, 0x09	; 9
     a62:	11 97       	sbiw	r26, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <main+0x50>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0x56>
     a68:	00 00       	nop
     a6a:	f0 cf       	rjmp	.-32     	; 0xa4c <main+0x3a>

00000a6c <E_Pulse>:

/*****************************L C D**************************/

void E_Pulse()
{
	LCDPORT = LCDPORT | 0b00000100;	//set E to high
     a6c:	aa 9a       	sbi	0x15, 2	; 21
     a6e:	89 ef       	ldi	r24, 0xF9	; 249
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <E_Pulse+0x6>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <E_Pulse+0xc>
     a78:	00 00       	nop
	_delay_ms(1) ;				//delay ~110ms
	LCDPORT = LCDPORT & 0b11111011;	//set E to low
     a7a:	aa 98       	cbi	0x15, 2	; 21
}
     a7c:	08 95       	ret

00000a7e <LCD_Init>:

void LCD_Init()
{
     a7e:	1f 93       	push	r17
	//LCD initialization
	//step by step (from Gosho) - from DATASHEET

	LCDPORT = LCDPORT & 0b11111110;
     a80:	a8 98       	cbi	0x15, 0	; 21
     a82:	8f e4       	ldi	r24, 0x4F	; 79
     a84:	93 ec       	ldi	r25, 0xC3	; 195
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <LCD_Init+0x8>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <LCD_Init+0xe>
     a8c:	00 00       	nop
	
	_delay_ms(200);


	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     a8e:	10 e3       	ldi	r17, 0x30	; 48
     a90:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <LCD_Init+0x16>
     a94:	00 00       	nop
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     a96:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCD_Init+0x1e>
     a9c:	00 00       	nop
	PORTDELAY 

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     a9e:	15 bb       	out	0x15, r17	; 21
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <LCD_Init+0x24>
     aa2:	00 00       	nop
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     aa4:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <LCD_Init+0x2c>
     aaa:	00 00       	nop
	PORTDELAY

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     aac:	15 bb       	out	0x15, r17	; 21
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <LCD_Init+0x32>
     ab0:	00 00       	nop
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     ab2:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <LCD_Init+0x3a>
     ab8:	00 00       	nop
	PORTDELAY

	LCDPORT = 0b00100000;						//set D4 to 0, D5 port to 1
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	85 bb       	out	0x15, r24	; 21
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <LCD_Init+0x42>
     ac0:	00 00       	nop
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     ac2:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
}
     ac6:	1f 91       	pop	r17
     ac8:	08 95       	ret

00000aca <LCDSendCommand>:

void LCDSendCommand(unsigned char a)
{
     aca:	df 93       	push	r29
     acc:	cf 93       	push	r28
     ace:	0f 92       	push	r0
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     ad4:	25 b3       	in	r18, 0x15	; 21
	E_Pulse();								//high->low to E port (pulse)
}

void LCDSendCommand(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     ad6:	98 2f       	mov	r25, r24
     ad8:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     ada:	20 6f       	ori	r18, 0xF0	; 240
     adc:	92 23       	and	r25, r18
     ade:	95 bb       	out	0x15, r25	; 21
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <LCDSendCommand+0x18>
     ae2:	00 00       	nop
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0
     ae4:	a8 98       	cbi	0x15, 0	; 21
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <LCDSendCommand+0x1e>
     ae8:	00 00       	nop
	PORTDELAY
	E_Pulse(); 
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
     af0:	96 ea       	ldi	r25, 0xA6	; 166
     af2:	9a 95       	dec	r25
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <LCDSendCommand+0x28>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <LCDSendCommand+0x2e>
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     af8:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse(); 
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	82 95       	swap	r24
     afe:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     b00:	9f 70       	andi	r25, 0x0F	; 15
     b02:	89 2b       	or	r24, r25
     b04:	85 bb       	out	0x15, r24	; 21
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <LCDSendCommand+0x3e>
     b08:	00 00       	nop
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0 -> display set to command mode
     b0a:	a8 98       	cbi	0x15, 0	; 21
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <LCDSendCommand+0x44>
     b0e:	00 00       	nop
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     b10:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
     b14:	e6 ea       	ldi	r30, 0xA6	; 166
     b16:	ea 95       	dec	r30
     b18:	f1 f7       	brne	.-4      	; 0xb16 <LCDSendCommand+0x4c>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <LCDSendCommand+0x52>

	_delay_us(500);

}
     b1c:	0f 90       	pop	r0
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	08 95       	ret

00000b24 <LCDSendChar>:

void LCDSendChar(unsigned char a)
{
     b24:	df 93       	push	r29
     b26:	cf 93       	push	r28
     b28:	0f 92       	push	r0
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     b2e:	25 b3       	in	r18, 0x15	; 21

}

void LCDSendChar(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     b30:	98 2f       	mov	r25, r24
     b32:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     b34:	20 6f       	ori	r18, 0xF0	; 240
     b36:	92 23       	and	r25, r18
     b38:	95 bb       	out	0x15, r25	; 21
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <LCDSendChar+0x18>
     b3c:	00 00       	nop
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1
     b3e:	a8 9a       	sbi	0x15, 0	; 21
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <LCDSendChar+0x1e>
     b42:	00 00       	nop
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
     b4a:	96 ea       	ldi	r25, 0xA6	; 166
     b4c:	9a 95       	dec	r25
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <LCDSendChar+0x28>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <LCDSendChar+0x2e>

	_delay_us(500);

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     b52:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits

	_delay_us(500);

	data = a<<4;							//get low 4 bits
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	82 95       	swap	r24
     b58:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     b5a:	9f 70       	andi	r25, 0x0F	; 15
     b5c:	89 2b       	or	r24, r25
     b5e:	85 bb       	out	0x15, r24	; 21
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <LCDSendChar+0x3e>
     b62:	00 00       	nop
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1 -> display set to command mode
     b64:	a8 9a       	sbi	0x15, 0	; 21
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <LCDSendChar+0x44>
     b68:	00 00       	nop
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     b6a:	0e 94 36 05 	call	0xa6c	; 0xa6c <E_Pulse>
     b6e:	e6 ea       	ldi	r30, 0xA6	; 166
     b70:	ea 95       	dec	r30
     b72:	f1 f7       	brne	.-4      	; 0xb70 <LCDSendChar+0x4c>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <LCDSendChar+0x52>

	_delay_us(500);
}
     b76:	0f 90       	pop	r0
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <LCDSendTxt>:

void LCDSendTxt(char* a)
{
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	0f 92       	push	r0
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	f8 2e       	mov	r15, r24

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     b94:	0f 2d       	mov	r16, r15
     b96:	19 2f       	mov	r17, r25
     b98:	cc 24       	eor	r12, r12
     b9a:	dd 24       	eor	r13, r13
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <LCDSendTxt+0x38>
  {
    LCDSendChar(a[Temp]);
     b9e:	f8 01       	movw	r30, r16
     ba0:	81 91       	ld	r24, Z+
     ba2:	8f 01       	movw	r16, r30
     ba4:	99 83       	std	Y+1, r25	; 0x01
     ba6:	0e 94 92 05 	call	0xb24	; 0xb24 <LCDSendChar>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <LCDSendTxt+0x2e>
     bac:	00 00       	nop
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     bae:	08 94       	sec
     bb0:	c1 1c       	adc	r12, r1
     bb2:	d1 1c       	adc	r13, r1
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	af 2d       	mov	r26, r15
     bb8:	b9 2f       	mov	r27, r25
     bba:	fd 01       	movw	r30, r26
     bbc:	01 90       	ld	r0, Z+
     bbe:	00 20       	and	r0, r0
     bc0:	e9 f7       	brne	.-6      	; 0xbbc <LCDSendTxt+0x3e>
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	ea 1b       	sub	r30, r26
     bc6:	fb 0b       	sbc	r31, r27
     bc8:	ce 16       	cp	r12, r30
     bca:	df 06       	cpc	r13, r31
     bcc:	40 f3       	brcs	.-48     	; 0xb9e <LCDSendTxt+0x20>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	08 95       	ret

00000be0 <LCDSendUnsafeCounteredTxt>:

void LCDSendUnsafeCounteredTxt(char* a, char count)
{
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     bec:	08 2f       	mov	r16, r24
     bee:	19 2f       	mov	r17, r25
     bf0:	c0 e0       	ldi	r28, 0x00	; 0
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
     bf4:	e6 2e       	mov	r14, r22
     bf6:	ff 24       	eor	r15, r15
     bf8:	08 c0       	rjmp	.+16     	; 0xc0a <LCDSendUnsafeCounteredTxt+0x2a>
  {
    LCDSendChar(a[Temp]);
     bfa:	f8 01       	movw	r30, r16
     bfc:	81 91       	ld	r24, Z+
     bfe:	8f 01       	movw	r16, r30
     c00:	0e 94 92 05 	call	0xb24	; 0xb24 <LCDSendChar>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <LCDSendUnsafeCounteredTxt+0x26>
     c06:	00 00       	nop
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     c08:	21 96       	adiw	r28, 0x01	; 1
     c0a:	ce 15       	cp	r28, r14
     c0c:	df 05       	cpc	r29, r15
     c0e:	ac f3       	brlt	.-22     	; 0xbfa <LCDSendUnsafeCounteredTxt+0x1a>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	08 95       	ret

00000c1e <LCDSendInt>:


void LCDSendInt(long a)
{
     c1e:	4f 92       	push	r4
     c20:	5f 92       	push	r5
     c22:	6f 92       	push	r6
     c24:	7f 92       	push	r7
     c26:	8f 92       	push	r8
     c28:	9f 92       	push	r9
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	1f 93       	push	r17
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	a8 97       	sbiw	r28, 0x28	; 40
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	6b 01       	movw	r12, r22
     c4e:	7c 01       	movw	r14, r24
	int C[20];
	unsigned char Temp=0, NumLen = 0;
	if (a < 0)
     c50:	97 ff       	sbrs	r25, 7
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <LCDSendInt+0x4c>
	{
		LCDSendChar('-');
     c54:	8d e2       	ldi	r24, 0x2D	; 45
     c56:	0e 94 92 05 	call	0xb24	; 0xb24 <LCDSendChar>
		a = -a;
     c5a:	f0 94       	com	r15
     c5c:	e0 94       	com	r14
     c5e:	d0 94       	com	r13
     c60:	c0 94       	com	r12
     c62:	c1 1c       	adc	r12, r1
     c64:	d1 1c       	adc	r13, r1
     c66:	e1 1c       	adc	r14, r1
     c68:	f1 1c       	adc	r15, r1
  }
}


void LCDSendInt(long a)
{
     c6a:	10 e0       	ldi	r17, 0x00	; 0
		a = -a;
	}
	do
	{	
		Temp++;
		C[Temp] = a % 10;
     c6c:	2e 01       	movw	r4, r28
     c6e:	08 94       	sec
     c70:	41 1c       	adc	r4, r1
     c72:	51 1c       	adc	r5, r1
     c74:	2a e0       	ldi	r18, 0x0A	; 10
     c76:	62 2e       	mov	r6, r18
     c78:	71 2c       	mov	r7, r1
     c7a:	81 2c       	mov	r8, r1
     c7c:	91 2c       	mov	r9, r1
		LCDSendChar('-');
		a = -a;
	}
	do
	{	
		Temp++;
     c7e:	1f 5f       	subi	r17, 0xFF	; 255
		C[Temp] = a % 10;
     c80:	a1 2e       	mov	r10, r17
     c82:	bb 24       	eor	r11, r11
     c84:	aa 0c       	add	r10, r10
     c86:	bb 1c       	adc	r11, r11
     c88:	a4 0c       	add	r10, r4
     c8a:	b5 1c       	adc	r11, r5
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	a4 01       	movw	r20, r8
     c92:	93 01       	movw	r18, r6
     c94:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divmodsi4>
     c98:	f5 01       	movw	r30, r10
     c9a:	71 83       	std	Z+1, r23	; 0x01
     c9c:	60 83       	st	Z, r22
		a = a/10;
     c9e:	69 01       	movw	r12, r18
     ca0:	7a 01       	movw	r14, r20
	}
	while (a);
     ca2:	c1 14       	cp	r12, r1
     ca4:	d1 04       	cpc	r13, r1
     ca6:	e1 04       	cpc	r14, r1
     ca8:	f1 04       	cpc	r15, r1
     caa:	49 f7       	brne	.-46     	; 0xc7e <LCDSendInt+0x60>
     cac:	0c c0       	rjmp	.+24     	; 0xcc6 <LCDSendInt+0xa8>
	NumLen = Temp;
	for (Temp = NumLen; Temp>0; Temp--) LCDSendChar(C[Temp] + 48);
     cae:	e1 2f       	mov	r30, r17
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ec 0d       	add	r30, r12
     cb8:	fd 1d       	adc	r31, r13
     cba:	80 81       	ld	r24, Z
     cbc:	80 5d       	subi	r24, 0xD0	; 208
     cbe:	0e 94 92 05 	call	0xb24	; 0xb24 <LCDSendChar>
     cc2:	11 50       	subi	r17, 0x01	; 1
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <LCDSendInt+0xb0>
     cc6:	6e 01       	movw	r12, r28
     cc8:	08 94       	sec
     cca:	c1 1c       	adc	r12, r1
     ccc:	d1 1c       	adc	r13, r1
     cce:	11 23       	and	r17, r17
     cd0:	71 f7       	brne	.-36     	; 0xcae <LCDSendInt+0x90>
}
     cd2:	a8 96       	adiw	r28, 0x28	; 40
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	1f 91       	pop	r17
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	7f 90       	pop	r7
     cf6:	6f 90       	pop	r6
     cf8:	5f 90       	pop	r5
     cfa:	4f 90       	pop	r4
     cfc:	08 95       	ret

00000cfe <LCDSendInt_Old>:

void LCDSendInt_Old(int a)
{
     cfe:	1f 93       	push	r17
  int h = 0;
  int l = 0;

  l = a%10;
  h = a/10;
     d00:	6a e0       	ldi	r22, 0x0A	; 10
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     d08:	18 2f       	mov	r17, r24

  LCDSendChar(h+48);
     d0a:	86 2f       	mov	r24, r22
     d0c:	80 5d       	subi	r24, 0xD0	; 208
     d0e:	0e 94 92 05 	call	0xb24	; 0xb24 <LCDSendChar>
  LCDSendChar(l+48);
     d12:	81 2f       	mov	r24, r17
     d14:	80 5d       	subi	r24, 0xD0	; 208
     d16:	0e 94 92 05 	call	0xb24	; 0xb24 <LCDSendChar>
}
     d1a:	1f 91       	pop	r17
     d1c:	08 95       	ret

00000d1e <SmartUp>:

void SmartUp(void)
{
	int Temp;
	for(Temp=0; Temp<1; Temp++) LCDSendCommand(CUR_UP);
     d1e:	80 e8       	ldi	r24, 0x80	; 128
     d20:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
}
     d24:	08 95       	ret

00000d26 <SmartDown>:

void SmartDown(void)
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	c8 e2       	ldi	r28, 0x28	; 40
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
	int Temp;
	for(Temp=0; Temp<40; Temp++) LCDSendCommand(CUR_DOWN);
     d2e:	80 ec       	ldi	r24, 0xC0	; 192
     d30:	0e 94 65 05 	call	0xaca	; 0xaca <LCDSendCommand>
     d34:	21 97       	sbiw	r28, 0x01	; 1
     d36:	d9 f7       	brne	.-10     	; 0xd2e <SmartDown+0x8>
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <Light>:

void Light(short a)
{
  if(a == 1)
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	29 f4       	brne	.+10     	; 0xd4e <Light+0x10>
  {
	LCDPORT = LCDPORT | 0b00100000;
     d44:	ad 9a       	sbi	0x15, 5	; 21
	DDRC = LCDPORT | 0b00100000;
     d46:	85 b3       	in	r24, 0x15	; 21
     d48:	80 62       	ori	r24, 0x20	; 32
     d4a:	84 bb       	out	0x14, r24	; 20
     d4c:	08 95       	ret

    //IO0SET_bit.P0_25 = 1;
    //IO0DIR_bit.P0_25 = 1;
  }
  if(a == 0)
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	11 f4       	brne	.+4      	; 0xd56 <Light+0x18>
  {
    LCDPORT = LCDPORT & 0b11011111;
     d52:	ad 98       	cbi	0x15, 5	; 21
    DDRC = DDRC & 0b11011111;
     d54:	a5 98       	cbi	0x14, 5	; 20
     d56:	08 95       	ret

00000d58 <_fpadd_parts>:
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e2 eb       	ldi	r30, 0xB2	; 178
     d5e:	f6 e0       	ldi	r31, 0x06	; 6
     d60:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__prologue_saves__+0x8>
     d64:	fc 01       	movw	r30, r24
     d66:	ea 01       	movw	r28, r20
     d68:	80 81       	ld	r24, Z
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	08 f4       	brcc	.+2      	; 0xd70 <_fpadd_parts+0x18>
     d6e:	38 c1       	rjmp	.+624    	; 0xfe0 <_fpadd_parts+0x288>
     d70:	db 01       	movw	r26, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <_fpadd_parts+0x22>
     d78:	30 c1       	rjmp	.+608    	; 0xfda <_fpadd_parts+0x282>
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	59 f4       	brne	.+22     	; 0xd94 <_fpadd_parts+0x3c>
     d7e:	94 30       	cpi	r25, 0x04	; 4
     d80:	09 f0       	breq	.+2      	; 0xd84 <_fpadd_parts+0x2c>
     d82:	2e c1       	rjmp	.+604    	; 0xfe0 <_fpadd_parts+0x288>
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	8c 91       	ld	r24, X
     d8a:	11 97       	sbiw	r26, 0x01	; 1
     d8c:	98 17       	cp	r25, r24
     d8e:	09 f0       	breq	.+2      	; 0xd92 <_fpadd_parts+0x3a>
     d90:	21 c1       	rjmp	.+578    	; 0xfd4 <_fpadd_parts+0x27c>
     d92:	26 c1       	rjmp	.+588    	; 0xfe0 <_fpadd_parts+0x288>
     d94:	94 30       	cpi	r25, 0x04	; 4
     d96:	09 f4       	brne	.+2      	; 0xd9a <_fpadd_parts+0x42>
     d98:	20 c1       	rjmp	.+576    	; 0xfda <_fpadd_parts+0x282>
     d9a:	92 30       	cpi	r25, 0x02	; 2
     d9c:	b1 f4       	brne	.+44     	; 0xdca <_fpadd_parts+0x72>
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	09 f0       	breq	.+2      	; 0xda4 <_fpadd_parts+0x4c>
     da2:	1e c1       	rjmp	.+572    	; 0xfe0 <_fpadd_parts+0x288>
     da4:	ca 01       	movw	r24, r20
     da6:	af 01       	movw	r20, r30
     da8:	28 e0       	ldi	r18, 0x08	; 8
     daa:	da 01       	movw	r26, r20
     dac:	0d 90       	ld	r0, X+
     dae:	ad 01       	movw	r20, r26
     db0:	dc 01       	movw	r26, r24
     db2:	0d 92       	st	X+, r0
     db4:	cd 01       	movw	r24, r26
     db6:	21 50       	subi	r18, 0x01	; 1
     db8:	c1 f7       	brne	.-16     	; 0xdaa <_fpadd_parts+0x52>
     dba:	db 01       	movw	r26, r22
     dbc:	11 96       	adiw	r26, 0x01	; 1
     dbe:	8c 91       	ld	r24, X
     dc0:	11 97       	sbiw	r26, 0x01	; 1
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	89 23       	and	r24, r25
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	0a c1       	rjmp	.+532    	; 0xfde <_fpadd_parts+0x286>
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <_fpadd_parts+0x78>
     dce:	05 c1       	rjmp	.+522    	; 0xfda <_fpadd_parts+0x282>
     dd0:	c2 80       	ldd	r12, Z+2	; 0x02
     dd2:	d3 80       	ldd	r13, Z+3	; 0x03
     dd4:	db 01       	movw	r26, r22
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	6d 90       	ld	r6, X+
     dda:	7c 90       	ld	r7, X
     ddc:	13 97       	sbiw	r26, 0x03	; 3
     dde:	24 81       	ldd	r18, Z+4	; 0x04
     de0:	35 81       	ldd	r19, Z+5	; 0x05
     de2:	46 81       	ldd	r20, Z+6	; 0x06
     de4:	57 81       	ldd	r21, Z+7	; 0x07
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	ed 90       	ld	r14, X+
     dea:	fd 90       	ld	r15, X+
     dec:	0d 91       	ld	r16, X+
     dee:	1c 91       	ld	r17, X
     df0:	17 97       	sbiw	r26, 0x07	; 7
     df2:	c6 01       	movw	r24, r12
     df4:	86 19       	sub	r24, r6
     df6:	97 09       	sbc	r25, r7
     df8:	5c 01       	movw	r10, r24
     dfa:	97 ff       	sbrs	r25, 7
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <_fpadd_parts+0xae>
     dfe:	aa 24       	eor	r10, r10
     e00:	bb 24       	eor	r11, r11
     e02:	a8 1a       	sub	r10, r24
     e04:	b9 0a       	sbc	r11, r25
     e06:	b0 e2       	ldi	r27, 0x20	; 32
     e08:	ab 16       	cp	r10, r27
     e0a:	b1 04       	cpc	r11, r1
     e0c:	0c f0       	brlt	.+2      	; 0xe10 <_fpadd_parts+0xb8>
     e0e:	61 c0       	rjmp	.+194    	; 0xed2 <_fpadd_parts+0x17a>
     e10:	18 16       	cp	r1, r24
     e12:	19 06       	cpc	r1, r25
     e14:	6c f5       	brge	.+90     	; 0xe70 <_fpadd_parts+0x118>
     e16:	37 01       	movw	r6, r14
     e18:	48 01       	movw	r8, r16
     e1a:	0a 2c       	mov	r0, r10
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <_fpadd_parts+0xce>
     e1e:	96 94       	lsr	r9
     e20:	87 94       	ror	r8
     e22:	77 94       	ror	r7
     e24:	67 94       	ror	r6
     e26:	0a 94       	dec	r0
     e28:	d2 f7       	brpl	.-12     	; 0xe1e <_fpadd_parts+0xc6>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	0a 2c       	mov	r0, r10
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <_fpadd_parts+0xe6>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	aa 1f       	adc	r26, r26
     e3c:	bb 1f       	adc	r27, r27
     e3e:	0a 94       	dec	r0
     e40:	d2 f7       	brpl	.-12     	; 0xe36 <_fpadd_parts+0xde>
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	a1 09       	sbc	r26, r1
     e46:	b1 09       	sbc	r27, r1
     e48:	8e 21       	and	r24, r14
     e4a:	9f 21       	and	r25, r15
     e4c:	a0 23       	and	r26, r16
     e4e:	b1 23       	and	r27, r17
     e50:	ee 24       	eor	r14, r14
     e52:	ff 24       	eor	r15, r15
     e54:	87 01       	movw	r16, r14
     e56:	e3 94       	inc	r14
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	a1 05       	cpc	r26, r1
     e5c:	b1 05       	cpc	r27, r1
     e5e:	19 f4       	brne	.+6      	; 0xe66 <_fpadd_parts+0x10e>
     e60:	ee 24       	eor	r14, r14
     e62:	ff 24       	eor	r15, r15
     e64:	87 01       	movw	r16, r14
     e66:	e6 28       	or	r14, r6
     e68:	f7 28       	or	r15, r7
     e6a:	08 29       	or	r16, r8
     e6c:	19 29       	or	r17, r9
     e6e:	3c c0       	rjmp	.+120    	; 0xee8 <_fpadd_parts+0x190>
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	d1 f1       	breq	.+116    	; 0xee8 <_fpadd_parts+0x190>
     e74:	ca 0c       	add	r12, r10
     e76:	db 1c       	adc	r13, r11
     e78:	39 01       	movw	r6, r18
     e7a:	4a 01       	movw	r8, r20
     e7c:	0a 2c       	mov	r0, r10
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <_fpadd_parts+0x130>
     e80:	96 94       	lsr	r9
     e82:	87 94       	ror	r8
     e84:	77 94       	ror	r7
     e86:	67 94       	ror	r6
     e88:	0a 94       	dec	r0
     e8a:	d2 f7       	brpl	.-12     	; 0xe80 <_fpadd_parts+0x128>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	0a 2c       	mov	r0, r10
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <_fpadd_parts+0x148>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	aa 1f       	adc	r26, r26
     e9e:	bb 1f       	adc	r27, r27
     ea0:	0a 94       	dec	r0
     ea2:	d2 f7       	brpl	.-12     	; 0xe98 <_fpadd_parts+0x140>
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	a1 09       	sbc	r26, r1
     ea8:	b1 09       	sbc	r27, r1
     eaa:	82 23       	and	r24, r18
     eac:	93 23       	and	r25, r19
     eae:	a4 23       	and	r26, r20
     eb0:	b5 23       	and	r27, r21
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	a1 05       	cpc	r26, r1
     ebe:	b1 05       	cpc	r27, r1
     ec0:	19 f4       	brne	.+6      	; 0xec8 <_fpadd_parts+0x170>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	a9 01       	movw	r20, r18
     ec8:	26 29       	or	r18, r6
     eca:	37 29       	or	r19, r7
     ecc:	48 29       	or	r20, r8
     ece:	59 29       	or	r21, r9
     ed0:	0b c0       	rjmp	.+22     	; 0xee8 <_fpadd_parts+0x190>
     ed2:	6c 14       	cp	r6, r12
     ed4:	7d 04       	cpc	r7, r13
     ed6:	24 f4       	brge	.+8      	; 0xee0 <_fpadd_parts+0x188>
     ed8:	ee 24       	eor	r14, r14
     eda:	ff 24       	eor	r15, r15
     edc:	87 01       	movw	r16, r14
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <_fpadd_parts+0x190>
     ee0:	63 01       	movw	r12, r6
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	a9 01       	movw	r20, r18
     ee8:	81 81       	ldd	r24, Z+1	; 0x01
     eea:	fb 01       	movw	r30, r22
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	89 17       	cp	r24, r25
     ef0:	09 f4       	brne	.+2      	; 0xef4 <_fpadd_parts+0x19c>
     ef2:	45 c0       	rjmp	.+138    	; 0xf7e <_fpadd_parts+0x226>
     ef4:	88 23       	and	r24, r24
     ef6:	49 f0       	breq	.+18     	; 0xf0a <_fpadd_parts+0x1b2>
     ef8:	d8 01       	movw	r26, r16
     efa:	c7 01       	movw	r24, r14
     efc:	82 1b       	sub	r24, r18
     efe:	93 0b       	sbc	r25, r19
     f00:	a4 0b       	sbc	r26, r20
     f02:	b5 0b       	sbc	r27, r21
     f04:	9c 01       	movw	r18, r24
     f06:	ad 01       	movw	r20, r26
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <_fpadd_parts+0x1ba>
     f0a:	2e 19       	sub	r18, r14
     f0c:	3f 09       	sbc	r19, r15
     f0e:	40 0b       	sbc	r20, r16
     f10:	51 0b       	sbc	r21, r17
     f12:	57 fd       	sbrc	r21, 7
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <_fpadd_parts+0x1c6>
     f16:	19 82       	std	Y+1, r1	; 0x01
     f18:	db 82       	std	Y+3, r13	; 0x03
     f1a:	ca 82       	std	Y+2, r12	; 0x02
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <_fpadd_parts+0x1dc>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	db 82       	std	Y+3, r13	; 0x03
     f24:	ca 82       	std	Y+2, r12	; 0x02
     f26:	50 95       	com	r21
     f28:	40 95       	com	r20
     f2a:	30 95       	com	r19
     f2c:	21 95       	neg	r18
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	4f 4f       	sbci	r20, 0xFF	; 255
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	2c 83       	std	Y+4, r18	; 0x04
     f36:	3d 83       	std	Y+5, r19	; 0x05
     f38:	4e 83       	std	Y+6, r20	; 0x06
     f3a:	5f 83       	std	Y+7, r21	; 0x07
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <_fpadd_parts+0x200>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	aa 1f       	adc	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	8c 83       	std	Y+4, r24	; 0x04
     f48:	9d 83       	std	Y+5, r25	; 0x05
     f4a:	ae 83       	std	Y+6, r26	; 0x06
     f4c:	bf 83       	std	Y+7, r27	; 0x07
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	9b 81       	ldd	r25, Y+3	; 0x03
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	9b 83       	std	Y+3, r25	; 0x03
     f56:	8a 83       	std	Y+2, r24	; 0x02
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	ae 81       	ldd	r26, Y+6	; 0x06
     f5e:	bf 81       	ldd	r27, Y+7	; 0x07
     f60:	9c 01       	movw	r18, r24
     f62:	ad 01       	movw	r20, r26
     f64:	21 50       	subi	r18, 0x01	; 1
     f66:	30 40       	sbci	r19, 0x00	; 0
     f68:	40 40       	sbci	r20, 0x00	; 0
     f6a:	50 40       	sbci	r21, 0x00	; 0
     f6c:	2f 3f       	cpi	r18, 0xFF	; 255
     f6e:	ef ef       	ldi	r30, 0xFF	; 255
     f70:	3e 07       	cpc	r19, r30
     f72:	ef ef       	ldi	r30, 0xFF	; 255
     f74:	4e 07       	cpc	r20, r30
     f76:	ef e3       	ldi	r30, 0x3F	; 63
     f78:	5e 07       	cpc	r21, r30
     f7a:	08 f3       	brcs	.-62     	; 0xf3e <_fpadd_parts+0x1e6>
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <_fpadd_parts+0x23c>
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	db 82       	std	Y+3, r13	; 0x03
     f82:	ca 82       	std	Y+2, r12	; 0x02
     f84:	2e 0d       	add	r18, r14
     f86:	3f 1d       	adc	r19, r15
     f88:	40 1f       	adc	r20, r16
     f8a:	51 1f       	adc	r21, r17
     f8c:	2c 83       	std	Y+4, r18	; 0x04
     f8e:	3d 83       	std	Y+5, r19	; 0x05
     f90:	4e 83       	std	Y+6, r20	; 0x06
     f92:	5f 83       	std	Y+7, r21	; 0x07
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	88 83       	st	Y, r24
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	4e 81       	ldd	r20, Y+6	; 0x06
     f9e:	5f 81       	ldd	r21, Y+7	; 0x07
     fa0:	57 ff       	sbrs	r21, 7
     fa2:	1d c0       	rjmp	.+58     	; 0xfde <_fpadd_parts+0x286>
     fa4:	da 01       	movw	r26, r20
     fa6:	c9 01       	movw	r24, r18
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	a0 70       	andi	r26, 0x00	; 0
     fae:	b0 70       	andi	r27, 0x00	; 0
     fb0:	56 95       	lsr	r21
     fb2:	47 95       	ror	r20
     fb4:	37 95       	ror	r19
     fb6:	27 95       	ror	r18
     fb8:	82 2b       	or	r24, r18
     fba:	93 2b       	or	r25, r19
     fbc:	a4 2b       	or	r26, r20
     fbe:	b5 2b       	or	r27, r21
     fc0:	8c 83       	std	Y+4, r24	; 0x04
     fc2:	9d 83       	std	Y+5, r25	; 0x05
     fc4:	ae 83       	std	Y+6, r26	; 0x06
     fc6:	bf 83       	std	Y+7, r27	; 0x07
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	9b 83       	std	Y+3, r25	; 0x03
     fd0:	8a 83       	std	Y+2, r24	; 0x02
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <_fpadd_parts+0x286>
     fd4:	e1 e8       	ldi	r30, 0x81	; 129
     fd6:	f1 e0       	ldi	r31, 0x01	; 1
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <_fpadd_parts+0x288>
     fda:	fb 01       	movw	r30, r22
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <_fpadd_parts+0x288>
     fde:	fe 01       	movw	r30, r28
     fe0:	cf 01       	movw	r24, r30
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	ee e0       	ldi	r30, 0x0E	; 14
     fe8:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__epilogue_restores__+0x8>

00000fec <__addsf3>:
     fec:	a0 e2       	ldi	r26, 0x20	; 32
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ec ef       	ldi	r30, 0xFC	; 252
     ff2:	f7 e0       	ldi	r31, 0x07	; 7
     ff4:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__+0x18>
     ff8:	69 83       	std	Y+1, r22	; 0x01
     ffa:	7a 83       	std	Y+2, r23	; 0x02
     ffc:	8b 83       	std	Y+3, r24	; 0x03
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	2d 83       	std	Y+5, r18	; 0x05
    1002:	3e 83       	std	Y+6, r19	; 0x06
    1004:	4f 83       	std	Y+7, r20	; 0x07
    1006:	58 87       	std	Y+8, r21	; 0x08
    1008:	89 e0       	ldi	r24, 0x09	; 9
    100a:	e8 2e       	mov	r14, r24
    100c:	f1 2c       	mov	r15, r1
    100e:	ec 0e       	add	r14, r28
    1010:	fd 1e       	adc	r15, r29
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	b7 01       	movw	r22, r14
    1018:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    101c:	8e 01       	movw	r16, r28
    101e:	0f 5e       	subi	r16, 0xEF	; 239
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	ce 01       	movw	r24, r28
    1024:	05 96       	adiw	r24, 0x05	; 5
    1026:	b8 01       	movw	r22, r16
    1028:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    102c:	c7 01       	movw	r24, r14
    102e:	b8 01       	movw	r22, r16
    1030:	ae 01       	movw	r20, r28
    1032:	47 5e       	subi	r20, 0xE7	; 231
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	0e 94 ac 06 	call	0xd58	; 0xd58 <_fpadd_parts>
    103a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__pack_f>
    103e:	a0 96       	adiw	r28, 0x20	; 32
    1040:	e6 e0       	ldi	r30, 0x06	; 6
    1042:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

00001046 <__subsf3>:
    1046:	a0 e2       	ldi	r26, 0x20	; 32
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e9 e2       	ldi	r30, 0x29	; 41
    104c:	f8 e0       	ldi	r31, 0x08	; 8
    104e:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__+0x18>
    1052:	69 83       	std	Y+1, r22	; 0x01
    1054:	7a 83       	std	Y+2, r23	; 0x02
    1056:	8b 83       	std	Y+3, r24	; 0x03
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	2d 83       	std	Y+5, r18	; 0x05
    105c:	3e 83       	std	Y+6, r19	; 0x06
    105e:	4f 83       	std	Y+7, r20	; 0x07
    1060:	58 87       	std	Y+8, r21	; 0x08
    1062:	8e 01       	movw	r16, r28
    1064:	07 5f       	subi	r16, 0xF7	; 247
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
    1068:	ce 01       	movw	r24, r28
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	b8 01       	movw	r22, r16
    106e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    1072:	91 e1       	ldi	r25, 0x11	; 17
    1074:	e9 2e       	mov	r14, r25
    1076:	f1 2c       	mov	r15, r1
    1078:	ec 0e       	add	r14, r28
    107a:	fd 1e       	adc	r15, r29
    107c:	ce 01       	movw	r24, r28
    107e:	05 96       	adiw	r24, 0x05	; 5
    1080:	b7 01       	movw	r22, r14
    1082:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    1086:	8a 89       	ldd	r24, Y+18	; 0x12
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	89 27       	eor	r24, r25
    108c:	8a 8b       	std	Y+18, r24	; 0x12
    108e:	c8 01       	movw	r24, r16
    1090:	b7 01       	movw	r22, r14
    1092:	ae 01       	movw	r20, r28
    1094:	47 5e       	subi	r20, 0xE7	; 231
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	0e 94 ac 06 	call	0xd58	; 0xd58 <_fpadd_parts>
    109c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__pack_f>
    10a0:	a0 96       	adiw	r28, 0x20	; 32
    10a2:	e6 e0       	ldi	r30, 0x06	; 6
    10a4:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

000010a8 <__mulsf3>:
    10a8:	a0 e2       	ldi	r26, 0x20	; 32
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e5       	ldi	r30, 0x5A	; 90
    10ae:	f8 e0       	ldi	r31, 0x08	; 8
    10b0:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__>
    10b4:	69 83       	std	Y+1, r22	; 0x01
    10b6:	7a 83       	std	Y+2, r23	; 0x02
    10b8:	8b 83       	std	Y+3, r24	; 0x03
    10ba:	9c 83       	std	Y+4, r25	; 0x04
    10bc:	2d 83       	std	Y+5, r18	; 0x05
    10be:	3e 83       	std	Y+6, r19	; 0x06
    10c0:	4f 83       	std	Y+7, r20	; 0x07
    10c2:	58 87       	std	Y+8, r21	; 0x08
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	be 01       	movw	r22, r28
    10ca:	67 5f       	subi	r22, 0xF7	; 247
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    10d2:	ce 01       	movw	r24, r28
    10d4:	05 96       	adiw	r24, 0x05	; 5
    10d6:	be 01       	movw	r22, r28
    10d8:	6f 5e       	subi	r22, 0xEF	; 239
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    10e0:	99 85       	ldd	r25, Y+9	; 0x09
    10e2:	92 30       	cpi	r25, 0x02	; 2
    10e4:	78 f0       	brcs	.+30     	; 0x1104 <__stack+0x5>
    10e6:	89 89       	ldd	r24, Y+17	; 0x11
    10e8:	82 30       	cpi	r24, 0x02	; 2
    10ea:	c0 f0       	brcs	.+48     	; 0x111c <__stack+0x1d>
    10ec:	94 30       	cpi	r25, 0x04	; 4
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <__mulsf3+0x4e>
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	41 f4       	brne	.+16     	; 0x1104 <__stack+0x5>
    10f4:	cb c0       	rjmp	.+406    	; 0x128c <__stack+0x18d>
    10f6:	84 30       	cpi	r24, 0x04	; 4
    10f8:	19 f4       	brne	.+6      	; 0x1100 <__stack+0x1>
    10fa:	92 30       	cpi	r25, 0x02	; 2
    10fc:	79 f4       	brne	.+30     	; 0x111c <__stack+0x1d>
    10fe:	c6 c0       	rjmp	.+396    	; 0x128c <__stack+0x18d>
    1100:	92 30       	cpi	r25, 0x02	; 2
    1102:	51 f4       	brne	.+20     	; 0x1118 <__stack+0x19>
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	2a 85       	ldd	r18, Y+10	; 0x0a
    1108:	9a 89       	ldd	r25, Y+18	; 0x12
    110a:	29 17       	cp	r18, r25
    110c:	09 f4       	brne	.+2      	; 0x1110 <__stack+0x11>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	8a 87       	std	Y+10, r24	; 0x0a
    1112:	ce 01       	movw	r24, r28
    1114:	09 96       	adiw	r24, 0x09	; 9
    1116:	bc c0       	rjmp	.+376    	; 0x1290 <__stack+0x191>
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	51 f4       	brne	.+20     	; 0x1130 <__stack+0x31>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1120:	9a 89       	ldd	r25, Y+18	; 0x12
    1122:	29 17       	cp	r18, r25
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x29>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	8a 8b       	std	Y+18, r24	; 0x12
    112a:	ce 01       	movw	r24, r28
    112c:	41 96       	adiw	r24, 0x11	; 17
    112e:	b0 c0       	rjmp	.+352    	; 0x1290 <__stack+0x191>
    1130:	6d 84       	ldd	r6, Y+13	; 0x0d
    1132:	7e 84       	ldd	r7, Y+14	; 0x0e
    1134:	8f 84       	ldd	r8, Y+15	; 0x0f
    1136:	98 88       	ldd	r9, Y+16	; 0x10
    1138:	ed 88       	ldd	r14, Y+21	; 0x15
    113a:	fe 88       	ldd	r15, Y+22	; 0x16
    113c:	0f 89       	ldd	r16, Y+23	; 0x17
    113e:	18 8d       	ldd	r17, Y+24	; 0x18
    1140:	e0 e2       	ldi	r30, 0x20	; 32
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	dc 01       	movw	r26, r24
    114a:	aa 24       	eor	r10, r10
    114c:	bb 24       	eor	r11, r11
    114e:	65 01       	movw	r12, r10
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	b3 01       	movw	r22, r6
    1158:	61 70       	andi	r22, 0x01	; 1
    115a:	70 70       	andi	r23, 0x00	; 0
    115c:	61 15       	cp	r22, r1
    115e:	71 05       	cpc	r23, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <__stack+0x97>
    1162:	2e 0d       	add	r18, r14
    1164:	3f 1d       	adc	r19, r15
    1166:	40 1f       	adc	r20, r16
    1168:	51 1f       	adc	r21, r17
    116a:	15 01       	movw	r2, r10
    116c:	26 01       	movw	r4, r12
    116e:	28 0e       	add	r2, r24
    1170:	39 1e       	adc	r3, r25
    1172:	4a 1e       	adc	r4, r26
    1174:	5b 1e       	adc	r5, r27
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	2e 15       	cp	r18, r14
    1180:	3f 05       	cpc	r19, r15
    1182:	40 07       	cpc	r20, r16
    1184:	51 07       	cpc	r21, r17
    1186:	18 f0       	brcs	.+6      	; 0x118e <__stack+0x8f>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	dc 01       	movw	r26, r24
    118e:	82 0d       	add	r24, r2
    1190:	93 1d       	adc	r25, r3
    1192:	a4 1d       	adc	r26, r4
    1194:	b5 1d       	adc	r27, r5
    1196:	aa 0c       	add	r10, r10
    1198:	bb 1c       	adc	r11, r11
    119a:	cc 1c       	adc	r12, r12
    119c:	dd 1c       	adc	r13, r13
    119e:	17 ff       	sbrs	r17, 7
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <__stack+0xb5>
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	26 2e       	mov	r2, r22
    11a6:	31 2c       	mov	r3, r1
    11a8:	41 2c       	mov	r4, r1
    11aa:	51 2c       	mov	r5, r1
    11ac:	a2 28       	or	r10, r2
    11ae:	b3 28       	or	r11, r3
    11b0:	c4 28       	or	r12, r4
    11b2:	d5 28       	or	r13, r5
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	49 f0       	breq	.+18     	; 0x11ca <__stack+0xcb>
    11b8:	ee 0c       	add	r14, r14
    11ba:	ff 1c       	adc	r15, r15
    11bc:	00 1f       	adc	r16, r16
    11be:	11 1f       	adc	r17, r17
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	c6 cf       	rjmp	.-116    	; 0x1156 <__stack+0x57>
    11ca:	6b 89       	ldd	r22, Y+19	; 0x13
    11cc:	7c 89       	ldd	r23, Y+20	; 0x14
    11ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    11d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    11d2:	6e 0f       	add	r22, r30
    11d4:	7f 1f       	adc	r23, r31
    11d6:	6e 5f       	subi	r22, 0xFE	; 254
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	7c 8f       	std	Y+28, r23	; 0x1c
    11dc:	6b 8f       	std	Y+27, r22	; 0x1b
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    11e2:	7a 89       	ldd	r23, Y+18	; 0x12
    11e4:	e7 17       	cp	r30, r23
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__stack+0xeb>
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	6a 8f       	std	Y+26, r22	; 0x1a
    11ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
    11ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
    11f0:	10 c0       	rjmp	.+32     	; 0x1212 <__stack+0x113>
    11f2:	fc 01       	movw	r30, r24
    11f4:	e1 70       	andi	r30, 0x01	; 1
    11f6:	f0 70       	andi	r31, 0x00	; 0
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__stack+0x107>
    11fc:	56 95       	lsr	r21
    11fe:	47 95       	ror	r20
    1200:	37 95       	ror	r19
    1202:	27 95       	ror	r18
    1204:	50 68       	ori	r21, 0x80	; 128
    1206:	b6 95       	lsr	r27
    1208:	a7 95       	ror	r26
    120a:	97 95       	ror	r25
    120c:	87 95       	ror	r24
    120e:	6f 5f       	subi	r22, 0xFF	; 255
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	b7 fd       	sbrc	r27, 7
    1214:	ee cf       	rjmp	.-36     	; 0x11f2 <__stack+0xf3>
    1216:	0c c0       	rjmp	.+24     	; 0x1230 <__stack+0x131>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	aa 1f       	adc	r26, r26
    121e:	bb 1f       	adc	r27, r27
    1220:	57 fd       	sbrc	r21, 7
    1222:	81 60       	ori	r24, 0x01	; 1
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	44 1f       	adc	r20, r20
    122a:	55 1f       	adc	r21, r21
    122c:	61 50       	subi	r22, 0x01	; 1
    122e:	70 40       	sbci	r23, 0x00	; 0
    1230:	80 30       	cpi	r24, 0x00	; 0
    1232:	e0 e0       	ldi	r30, 0x00	; 0
    1234:	9e 07       	cpc	r25, r30
    1236:	e0 e0       	ldi	r30, 0x00	; 0
    1238:	ae 07       	cpc	r26, r30
    123a:	e0 e4       	ldi	r30, 0x40	; 64
    123c:	be 07       	cpc	r27, r30
    123e:	60 f3       	brcs	.-40     	; 0x1218 <__stack+0x119>
    1240:	6b 8f       	std	Y+27, r22	; 0x1b
    1242:	7c 8f       	std	Y+28, r23	; 0x1c
    1244:	6f e7       	ldi	r22, 0x7F	; 127
    1246:	e6 2e       	mov	r14, r22
    1248:	f1 2c       	mov	r15, r1
    124a:	01 2d       	mov	r16, r1
    124c:	11 2d       	mov	r17, r1
    124e:	e8 22       	and	r14, r24
    1250:	f9 22       	and	r15, r25
    1252:	0a 23       	and	r16, r26
    1254:	1b 23       	and	r17, r27
    1256:	60 e4       	ldi	r22, 0x40	; 64
    1258:	e6 16       	cp	r14, r22
    125a:	f1 04       	cpc	r15, r1
    125c:	01 05       	cpc	r16, r1
    125e:	11 05       	cpc	r17, r1
    1260:	61 f4       	brne	.+24     	; 0x127a <__stack+0x17b>
    1262:	87 fd       	sbrc	r24, 7
    1264:	0a c0       	rjmp	.+20     	; 0x127a <__stack+0x17b>
    1266:	21 15       	cp	r18, r1
    1268:	31 05       	cpc	r19, r1
    126a:	41 05       	cpc	r20, r1
    126c:	51 05       	cpc	r21, r1
    126e:	29 f0       	breq	.+10     	; 0x127a <__stack+0x17b>
    1270:	80 5c       	subi	r24, 0xC0	; 192
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	af 4f       	sbci	r26, 0xFF	; 255
    1276:	bf 4f       	sbci	r27, 0xFF	; 255
    1278:	80 78       	andi	r24, 0x80	; 128
    127a:	8d 8f       	std	Y+29, r24	; 0x1d
    127c:	9e 8f       	std	Y+30, r25	; 0x1e
    127e:	af 8f       	std	Y+31, r26	; 0x1f
    1280:	b8 a3       	std	Y+32, r27	; 0x20
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	89 8f       	std	Y+25, r24	; 0x19
    1286:	ce 01       	movw	r24, r28
    1288:	49 96       	adiw	r24, 0x19	; 25
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <__stack+0x191>
    128c:	81 e8       	ldi	r24, 0x81	; 129
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__pack_f>
    1294:	a0 96       	adiw	r28, 0x20	; 32
    1296:	e2 e1       	ldi	r30, 0x12	; 18
    1298:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__>

0000129c <__nesf2>:
    129c:	a8 e1       	ldi	r26, 0x18	; 24
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e4 e5       	ldi	r30, 0x54	; 84
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__+0x18>
    12a8:	69 83       	std	Y+1, r22	; 0x01
    12aa:	7a 83       	std	Y+2, r23	; 0x02
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	2d 83       	std	Y+5, r18	; 0x05
    12b2:	3e 83       	std	Y+6, r19	; 0x06
    12b4:	4f 83       	std	Y+7, r20	; 0x07
    12b6:	58 87       	std	Y+8, r21	; 0x08
    12b8:	8e 01       	movw	r16, r28
    12ba:	07 5f       	subi	r16, 0xF7	; 247
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	b8 01       	movw	r22, r16
    12c4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    12c8:	81 e1       	ldi	r24, 0x11	; 17
    12ca:	e8 2e       	mov	r14, r24
    12cc:	f1 2c       	mov	r15, r1
    12ce:	ec 0e       	add	r14, r28
    12d0:	fd 1e       	adc	r15, r29
    12d2:	ce 01       	movw	r24, r28
    12d4:	05 96       	adiw	r24, 0x05	; 5
    12d6:	b7 01       	movw	r22, r14
    12d8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	40 f0       	brcs	.+16     	; 0x12f2 <__nesf2+0x56>
    12e2:	89 89       	ldd	r24, Y+17	; 0x11
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	28 f0       	brcs	.+10     	; 0x12f2 <__nesf2+0x56>
    12e8:	c8 01       	movw	r24, r16
    12ea:	b7 01       	movw	r22, r14
    12ec:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__fpcmp_parts_f>
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <__nesf2+0x58>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	68 96       	adiw	r28, 0x18	; 24
    12f6:	e6 e0       	ldi	r30, 0x06	; 6
    12f8:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

000012fc <__gtsf2>:
    12fc:	a8 e1       	ldi	r26, 0x18	; 24
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e8       	ldi	r30, 0x84	; 132
    1302:	f9 e0       	ldi	r31, 0x09	; 9
    1304:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__+0x18>
    1308:	69 83       	std	Y+1, r22	; 0x01
    130a:	7a 83       	std	Y+2, r23	; 0x02
    130c:	8b 83       	std	Y+3, r24	; 0x03
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	2d 83       	std	Y+5, r18	; 0x05
    1312:	3e 83       	std	Y+6, r19	; 0x06
    1314:	4f 83       	std	Y+7, r20	; 0x07
    1316:	58 87       	std	Y+8, r21	; 0x08
    1318:	8e 01       	movw	r16, r28
    131a:	07 5f       	subi	r16, 0xF7	; 247
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	ce 01       	movw	r24, r28
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	b8 01       	movw	r22, r16
    1324:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    1328:	81 e1       	ldi	r24, 0x11	; 17
    132a:	e8 2e       	mov	r14, r24
    132c:	f1 2c       	mov	r15, r1
    132e:	ec 0e       	add	r14, r28
    1330:	fd 1e       	adc	r15, r29
    1332:	ce 01       	movw	r24, r28
    1334:	05 96       	adiw	r24, 0x05	; 5
    1336:	b7 01       	movw	r22, r14
    1338:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    133c:	89 85       	ldd	r24, Y+9	; 0x09
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	40 f0       	brcs	.+16     	; 0x1352 <__gtsf2+0x56>
    1342:	89 89       	ldd	r24, Y+17	; 0x11
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	28 f0       	brcs	.+10     	; 0x1352 <__gtsf2+0x56>
    1348:	c8 01       	movw	r24, r16
    134a:	b7 01       	movw	r22, r14
    134c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__fpcmp_parts_f>
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <__gtsf2+0x58>
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	68 96       	adiw	r28, 0x18	; 24
    1356:	e6 e0       	ldi	r30, 0x06	; 6
    1358:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

0000135c <__gesf2>:
    135c:	a8 e1       	ldi	r26, 0x18	; 24
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 eb       	ldi	r30, 0xB4	; 180
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__+0x18>
    1368:	69 83       	std	Y+1, r22	; 0x01
    136a:	7a 83       	std	Y+2, r23	; 0x02
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	2d 83       	std	Y+5, r18	; 0x05
    1372:	3e 83       	std	Y+6, r19	; 0x06
    1374:	4f 83       	std	Y+7, r20	; 0x07
    1376:	58 87       	std	Y+8, r21	; 0x08
    1378:	8e 01       	movw	r16, r28
    137a:	07 5f       	subi	r16, 0xF7	; 247
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	ce 01       	movw	r24, r28
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	b8 01       	movw	r22, r16
    1384:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    1388:	81 e1       	ldi	r24, 0x11	; 17
    138a:	e8 2e       	mov	r14, r24
    138c:	f1 2c       	mov	r15, r1
    138e:	ec 0e       	add	r14, r28
    1390:	fd 1e       	adc	r15, r29
    1392:	ce 01       	movw	r24, r28
    1394:	05 96       	adiw	r24, 0x05	; 5
    1396:	b7 01       	movw	r22, r14
    1398:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	40 f0       	brcs	.+16     	; 0x13b2 <__gesf2+0x56>
    13a2:	89 89       	ldd	r24, Y+17	; 0x11
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	28 f0       	brcs	.+10     	; 0x13b2 <__gesf2+0x56>
    13a8:	c8 01       	movw	r24, r16
    13aa:	b7 01       	movw	r22, r14
    13ac:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__fpcmp_parts_f>
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <__gesf2+0x58>
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	68 96       	adiw	r28, 0x18	; 24
    13b6:	e6 e0       	ldi	r30, 0x06	; 6
    13b8:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

000013bc <__lesf2>:
    13bc:	a8 e1       	ldi	r26, 0x18	; 24
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 ee       	ldi	r30, 0xE4	; 228
    13c2:	f9 e0       	ldi	r31, 0x09	; 9
    13c4:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__+0x18>
    13c8:	69 83       	std	Y+1, r22	; 0x01
    13ca:	7a 83       	std	Y+2, r23	; 0x02
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	2d 83       	std	Y+5, r18	; 0x05
    13d2:	3e 83       	std	Y+6, r19	; 0x06
    13d4:	4f 83       	std	Y+7, r20	; 0x07
    13d6:	58 87       	std	Y+8, r21	; 0x08
    13d8:	8e 01       	movw	r16, r28
    13da:	07 5f       	subi	r16, 0xF7	; 247
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	ce 01       	movw	r24, r28
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	b8 01       	movw	r22, r16
    13e4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    13e8:	81 e1       	ldi	r24, 0x11	; 17
    13ea:	e8 2e       	mov	r14, r24
    13ec:	f1 2c       	mov	r15, r1
    13ee:	ec 0e       	add	r14, r28
    13f0:	fd 1e       	adc	r15, r29
    13f2:	ce 01       	movw	r24, r28
    13f4:	05 96       	adiw	r24, 0x05	; 5
    13f6:	b7 01       	movw	r22, r14
    13f8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	40 f0       	brcs	.+16     	; 0x1412 <__lesf2+0x56>
    1402:	89 89       	ldd	r24, Y+17	; 0x11
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	28 f0       	brcs	.+10     	; 0x1412 <__lesf2+0x56>
    1408:	c8 01       	movw	r24, r16
    140a:	b7 01       	movw	r22, r14
    140c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__fpcmp_parts_f>
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <__lesf2+0x58>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	68 96       	adiw	r28, 0x18	; 24
    1416:	e6 e0       	ldi	r30, 0x06	; 6
    1418:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

0000141c <__floatsisf>:
    141c:	a8 e0       	ldi	r26, 0x08	; 8
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e1       	ldi	r30, 0x14	; 20
    1422:	fa e0       	ldi	r31, 0x0A	; 10
    1424:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__+0x18>
    1428:	7b 01       	movw	r14, r22
    142a:	8c 01       	movw	r16, r24
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	d8 01       	movw	r26, r16
    1432:	c7 01       	movw	r24, r14
    1434:	88 27       	eor	r24, r24
    1436:	b7 fd       	sbrc	r27, 7
    1438:	83 95       	inc	r24
    143a:	99 27       	eor	r25, r25
    143c:	aa 27       	eor	r26, r26
    143e:	bb 27       	eor	r27, r27
    1440:	28 2f       	mov	r18, r24
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	e1 14       	cp	r14, r1
    1446:	f1 04       	cpc	r15, r1
    1448:	01 05       	cpc	r16, r1
    144a:	11 05       	cpc	r17, r1
    144c:	19 f4       	brne	.+6      	; 0x1454 <__floatsisf+0x38>
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	37 c0       	rjmp	.+110    	; 0x14c2 <__floatsisf+0xa6>
    1454:	8e e1       	ldi	r24, 0x1E	; 30
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	22 23       	and	r18, r18
    145e:	89 f0       	breq	.+34     	; 0x1482 <__floatsisf+0x66>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	e8 16       	cp	r14, r24
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	f8 06       	cpc	r15, r24
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	08 07       	cpc	r16, r24
    146c:	80 e8       	ldi	r24, 0x80	; 128
    146e:	18 07       	cpc	r17, r24
    1470:	69 f1       	breq	.+90     	; 0x14cc <__floatsisf+0xb0>
    1472:	10 95       	com	r17
    1474:	00 95       	com	r16
    1476:	f0 94       	com	r15
    1478:	e0 94       	com	r14
    147a:	e1 1c       	adc	r14, r1
    147c:	f1 1c       	adc	r15, r1
    147e:	01 1d       	adc	r16, r1
    1480:	11 1d       	adc	r17, r1
    1482:	ed 82       	std	Y+5, r14	; 0x05
    1484:	fe 82       	std	Y+6, r15	; 0x06
    1486:	0f 83       	std	Y+7, r16	; 0x07
    1488:	18 87       	std	Y+8, r17	; 0x08
    148a:	c8 01       	movw	r24, r16
    148c:	b7 01       	movw	r22, r14
    148e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__clzsi2>
    1492:	9c 01       	movw	r18, r24
    1494:	21 50       	subi	r18, 0x01	; 1
    1496:	30 40       	sbci	r19, 0x00	; 0
    1498:	12 16       	cp	r1, r18
    149a:	13 06       	cpc	r1, r19
    149c:	94 f4       	brge	.+36     	; 0x14c2 <__floatsisf+0xa6>
    149e:	02 2e       	mov	r0, r18
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <__floatsisf+0x8e>
    14a2:	ee 0c       	add	r14, r14
    14a4:	ff 1c       	adc	r15, r15
    14a6:	00 1f       	adc	r16, r16
    14a8:	11 1f       	adc	r17, r17
    14aa:	0a 94       	dec	r0
    14ac:	d2 f7       	brpl	.-12     	; 0x14a2 <__floatsisf+0x86>
    14ae:	ed 82       	std	Y+5, r14	; 0x05
    14b0:	fe 82       	std	Y+6, r15	; 0x06
    14b2:	0f 83       	std	Y+7, r16	; 0x07
    14b4:	18 87       	std	Y+8, r17	; 0x08
    14b6:	8e e1       	ldi	r24, 0x1E	; 30
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	82 1b       	sub	r24, r18
    14bc:	93 0b       	sbc	r25, r19
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__pack_f>
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <__floatsisf+0xb8>
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	9f ec       	ldi	r25, 0xCF	; 207
    14d4:	28 96       	adiw	r28, 0x08	; 8
    14d6:	e6 e0       	ldi	r30, 0x06	; 6
    14d8:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

000014dc <__fixsfsi>:
    14dc:	ac e0       	ldi	r26, 0x0C	; 12
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e4 e7       	ldi	r30, 0x74	; 116
    14e2:	fa e0       	ldi	r31, 0x0A	; 10
    14e4:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__prologue_saves__+0x20>
    14e8:	69 83       	std	Y+1, r22	; 0x01
    14ea:	7a 83       	std	Y+2, r23	; 0x02
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	be 01       	movw	r22, r28
    14f6:	6b 5f       	subi	r22, 0xFB	; 251
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__unpack_f>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	81 f1       	breq	.+96     	; 0x1564 <__fixsfsi+0x88>
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	70 f1       	brcs	.+92     	; 0x1564 <__fixsfsi+0x88>
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	21 f4       	brne	.+8      	; 0x1514 <__fixsfsi+0x38>
    150c:	8e 81       	ldd	r24, Y+6	; 0x06
    150e:	88 23       	and	r24, r24
    1510:	69 f1       	breq	.+90     	; 0x156c <__fixsfsi+0x90>
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <__fixsfsi+0x4c>
    1514:	2f 81       	ldd	r18, Y+7	; 0x07
    1516:	38 85       	ldd	r19, Y+8	; 0x08
    1518:	37 fd       	sbrc	r19, 7
    151a:	24 c0       	rjmp	.+72     	; 0x1564 <__fixsfsi+0x88>
    151c:	6e 81       	ldd	r22, Y+6	; 0x06
    151e:	2f 31       	cpi	r18, 0x1F	; 31
    1520:	31 05       	cpc	r19, r1
    1522:	3c f0       	brlt	.+14     	; 0x1532 <__fixsfsi+0x56>
    1524:	66 23       	and	r22, r22
    1526:	11 f1       	breq	.+68     	; 0x156c <__fixsfsi+0x90>
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e8       	ldi	r21, 0x80	; 128
    1530:	21 c0       	rjmp	.+66     	; 0x1574 <__fixsfsi+0x98>
    1532:	8e e1       	ldi	r24, 0x1E	; 30
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	82 1b       	sub	r24, r18
    1538:	93 0b       	sbc	r25, r19
    153a:	29 85       	ldd	r18, Y+9	; 0x09
    153c:	3a 85       	ldd	r19, Y+10	; 0x0a
    153e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1540:	5c 85       	ldd	r21, Y+12	; 0x0c
    1542:	04 c0       	rjmp	.+8      	; 0x154c <__fixsfsi+0x70>
    1544:	56 95       	lsr	r21
    1546:	47 95       	ror	r20
    1548:	37 95       	ror	r19
    154a:	27 95       	ror	r18
    154c:	8a 95       	dec	r24
    154e:	d2 f7       	brpl	.-12     	; 0x1544 <__fixsfsi+0x68>
    1550:	66 23       	and	r22, r22
    1552:	81 f0       	breq	.+32     	; 0x1574 <__fixsfsi+0x98>
    1554:	50 95       	com	r21
    1556:	40 95       	com	r20
    1558:	30 95       	com	r19
    155a:	21 95       	neg	r18
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	4f 4f       	sbci	r20, 0xFF	; 255
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	08 c0       	rjmp	.+16     	; 0x1574 <__fixsfsi+0x98>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	a9 01       	movw	r20, r18
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <__fixsfsi+0x98>
    156c:	2f ef       	ldi	r18, 0xFF	; 255
    156e:	3f ef       	ldi	r19, 0xFF	; 255
    1570:	4f ef       	ldi	r20, 0xFF	; 255
    1572:	5f e7       	ldi	r21, 0x7F	; 127
    1574:	b9 01       	movw	r22, r18
    1576:	ca 01       	movw	r24, r20
    1578:	2c 96       	adiw	r28, 0x0c	; 12
    157a:	e2 e0       	ldi	r30, 0x02	; 2
    157c:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__epilogue_restores__+0x20>

00001580 <__clzsi2>:
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	7b 01       	movw	r14, r22
    1592:	8c 01       	movw	r16, r24
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	e8 16       	cp	r14, r24
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	f8 06       	cpc	r15, r24
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	08 07       	cpc	r16, r24
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	18 07       	cpc	r17, r24
    15a4:	58 f4       	brcc	.+22     	; 0x15bc <__clzsi2+0x3c>
    15a6:	ef ef       	ldi	r30, 0xFF	; 255
    15a8:	ee 16       	cp	r14, r30
    15aa:	f1 04       	cpc	r15, r1
    15ac:	01 05       	cpc	r16, r1
    15ae:	11 05       	cpc	r17, r1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <__clzsi2+0x34>
    15b2:	90 f4       	brcc	.+36     	; 0x15d8 <__clzsi2+0x58>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	dc 01       	movw	r26, r24
    15ba:	17 c0       	rjmp	.+46     	; 0x15ea <__clzsi2+0x6a>
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	ef 16       	cp	r14, r31
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	ff 06       	cpc	r15, r31
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	0f 07       	cpc	r16, r31
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	1f 07       	cpc	r17, r31
    15cc:	50 f4       	brcc	.+20     	; 0x15e2 <__clzsi2+0x62>
    15ce:	80 e1       	ldi	r24, 0x10	; 16
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e0       	ldi	r26, 0x00	; 0
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <__clzsi2+0x6a>
    15d8:	88 e0       	ldi	r24, 0x08	; 8
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e0       	ldi	r26, 0x00	; 0
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <__clzsi2+0x6a>
    15e2:	88 e1       	ldi	r24, 0x18	; 24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a0 e0       	ldi	r26, 0x00	; 0
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	20 e2       	ldi	r18, 0x20	; 32
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	28 1b       	sub	r18, r24
    15f4:	39 0b       	sbc	r19, r25
    15f6:	4a 0b       	sbc	r20, r26
    15f8:	5b 0b       	sbc	r21, r27
    15fa:	57 01       	movw	r10, r14
    15fc:	68 01       	movw	r12, r16
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <__clzsi2+0x88>
    1600:	d6 94       	lsr	r13
    1602:	c7 94       	ror	r12
    1604:	b7 94       	ror	r11
    1606:	a7 94       	ror	r10
    1608:	8a 95       	dec	r24
    160a:	d2 f7       	brpl	.-12     	; 0x1600 <__clzsi2+0x80>
    160c:	d6 01       	movw	r26, r12
    160e:	c5 01       	movw	r24, r10
    1610:	87 57       	subi	r24, 0x77	; 119
    1612:	9e 4f       	sbci	r25, 0xFE	; 254
    1614:	fc 01       	movw	r30, r24
    1616:	80 81       	ld	r24, Z
    1618:	28 1b       	sub	r18, r24
    161a:	31 09       	sbc	r19, r1
    161c:	41 09       	sbc	r20, r1
    161e:	51 09       	sbc	r21, r1
    1620:	c9 01       	movw	r24, r18
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	08 95       	ret

00001634 <__pack_f>:
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	fc 01       	movw	r30, r24
    1642:	24 81       	ldd	r18, Z+4	; 0x04
    1644:	35 81       	ldd	r19, Z+5	; 0x05
    1646:	46 81       	ldd	r20, Z+6	; 0x06
    1648:	57 81       	ldd	r21, Z+7	; 0x07
    164a:	61 81       	ldd	r22, Z+1	; 0x01
    164c:	80 81       	ld	r24, Z
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	20 f4       	brcc	.+8      	; 0x165a <__pack_f+0x26>
    1652:	40 61       	ori	r20, 0x10	; 16
    1654:	ef ef       	ldi	r30, 0xFF	; 255
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	a3 c0       	rjmp	.+326    	; 0x17a0 <__pack_f+0x16c>
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	09 f4       	brne	.+2      	; 0x1660 <__pack_f+0x2c>
    165e:	9b c0       	rjmp	.+310    	; 0x1796 <__pack_f+0x162>
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	09 f4       	brne	.+2      	; 0x1666 <__pack_f+0x32>
    1664:	92 c0       	rjmp	.+292    	; 0x178a <__pack_f+0x156>
    1666:	21 15       	cp	r18, r1
    1668:	31 05       	cpc	r19, r1
    166a:	41 05       	cpc	r20, r1
    166c:	51 05       	cpc	r21, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <__pack_f+0x3e>
    1670:	8f c0       	rjmp	.+286    	; 0x1790 <__pack_f+0x15c>
    1672:	02 80       	ldd	r0, Z+2	; 0x02
    1674:	f3 81       	ldd	r31, Z+3	; 0x03
    1676:	e0 2d       	mov	r30, r0
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	e2 38       	cpi	r30, 0x82	; 130
    167c:	f8 07       	cpc	r31, r24
    167e:	0c f0       	brlt	.+2      	; 0x1682 <__pack_f+0x4e>
    1680:	5a c0       	rjmp	.+180    	; 0x1736 <__pack_f+0x102>
    1682:	c2 e8       	ldi	r28, 0x82	; 130
    1684:	df ef       	ldi	r29, 0xFF	; 255
    1686:	ce 1b       	sub	r28, r30
    1688:	df 0b       	sbc	r29, r31
    168a:	ca 31       	cpi	r28, 0x1A	; 26
    168c:	d1 05       	cpc	r29, r1
    168e:	6c f5       	brge	.+90     	; 0x16ea <__pack_f+0xb6>
    1690:	79 01       	movw	r14, r18
    1692:	8a 01       	movw	r16, r20
    1694:	0c 2e       	mov	r0, r28
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <__pack_f+0x6c>
    1698:	16 95       	lsr	r17
    169a:	07 95       	ror	r16
    169c:	f7 94       	ror	r15
    169e:	e7 94       	ror	r14
    16a0:	0a 94       	dec	r0
    16a2:	d2 f7       	brpl	.-12     	; 0x1698 <__pack_f+0x64>
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a0 e0       	ldi	r26, 0x00	; 0
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	0c 2e       	mov	r0, r28
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <__pack_f+0x84>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	aa 1f       	adc	r26, r26
    16b6:	bb 1f       	adc	r27, r27
    16b8:	0a 94       	dec	r0
    16ba:	d2 f7       	brpl	.-12     	; 0x16b0 <__pack_f+0x7c>
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	a1 09       	sbc	r26, r1
    16c0:	b1 09       	sbc	r27, r1
    16c2:	82 23       	and	r24, r18
    16c4:	93 23       	and	r25, r19
    16c6:	a4 23       	and	r26, r20
    16c8:	b5 23       	and	r27, r21
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	a1 05       	cpc	r26, r1
    16d6:	b1 05       	cpc	r27, r1
    16d8:	19 f4       	brne	.+6      	; 0x16e0 <__pack_f+0xac>
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	a9 01       	movw	r20, r18
    16e0:	2e 29       	or	r18, r14
    16e2:	3f 29       	or	r19, r15
    16e4:	40 2b       	or	r20, r16
    16e6:	51 2b       	or	r21, r17
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <__pack_f+0xbc>
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	da 01       	movw	r26, r20
    16f2:	c9 01       	movw	r24, r18
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	a0 70       	andi	r26, 0x00	; 0
    16fa:	b0 70       	andi	r27, 0x00	; 0
    16fc:	80 34       	cpi	r24, 0x40	; 64
    16fe:	91 05       	cpc	r25, r1
    1700:	a1 05       	cpc	r26, r1
    1702:	b1 05       	cpc	r27, r1
    1704:	39 f4       	brne	.+14     	; 0x1714 <__pack_f+0xe0>
    1706:	27 ff       	sbrs	r18, 7
    1708:	09 c0       	rjmp	.+18     	; 0x171c <__pack_f+0xe8>
    170a:	20 5c       	subi	r18, 0xC0	; 192
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	4f 4f       	sbci	r20, 0xFF	; 255
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	04 c0       	rjmp	.+8      	; 0x171c <__pack_f+0xe8>
    1714:	21 5c       	subi	r18, 0xC1	; 193
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	4f 4f       	sbci	r20, 0xFF	; 255
    171a:	5f 4f       	sbci	r21, 0xFF	; 255
    171c:	e1 e0       	ldi	r30, 0x01	; 1
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	20 30       	cpi	r18, 0x00	; 0
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	38 07       	cpc	r19, r24
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	48 07       	cpc	r20, r24
    172a:	80 e4       	ldi	r24, 0x40	; 64
    172c:	58 07       	cpc	r21, r24
    172e:	28 f5       	brcc	.+74     	; 0x177a <__pack_f+0x146>
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	22 c0       	rjmp	.+68     	; 0x177a <__pack_f+0x146>
    1736:	e0 38       	cpi	r30, 0x80	; 128
    1738:	f1 05       	cpc	r31, r1
    173a:	6c f5       	brge	.+90     	; 0x1796 <__pack_f+0x162>
    173c:	e1 58       	subi	r30, 0x81	; 129
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	da 01       	movw	r26, r20
    1742:	c9 01       	movw	r24, r18
    1744:	8f 77       	andi	r24, 0x7F	; 127
    1746:	90 70       	andi	r25, 0x00	; 0
    1748:	a0 70       	andi	r26, 0x00	; 0
    174a:	b0 70       	andi	r27, 0x00	; 0
    174c:	80 34       	cpi	r24, 0x40	; 64
    174e:	91 05       	cpc	r25, r1
    1750:	a1 05       	cpc	r26, r1
    1752:	b1 05       	cpc	r27, r1
    1754:	39 f4       	brne	.+14     	; 0x1764 <__pack_f+0x130>
    1756:	27 ff       	sbrs	r18, 7
    1758:	09 c0       	rjmp	.+18     	; 0x176c <__pack_f+0x138>
    175a:	20 5c       	subi	r18, 0xC0	; 192
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	4f 4f       	sbci	r20, 0xFF	; 255
    1760:	5f 4f       	sbci	r21, 0xFF	; 255
    1762:	04 c0       	rjmp	.+8      	; 0x176c <__pack_f+0x138>
    1764:	21 5c       	subi	r18, 0xC1	; 193
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	4f 4f       	sbci	r20, 0xFF	; 255
    176a:	5f 4f       	sbci	r21, 0xFF	; 255
    176c:	57 ff       	sbrs	r21, 7
    176e:	05 c0       	rjmp	.+10     	; 0x177a <__pack_f+0x146>
    1770:	56 95       	lsr	r21
    1772:	47 95       	ror	r20
    1774:	37 95       	ror	r19
    1776:	27 95       	ror	r18
    1778:	31 96       	adiw	r30, 0x01	; 1
    177a:	87 e0       	ldi	r24, 0x07	; 7
    177c:	56 95       	lsr	r21
    177e:	47 95       	ror	r20
    1780:	37 95       	ror	r19
    1782:	27 95       	ror	r18
    1784:	8a 95       	dec	r24
    1786:	d1 f7       	brne	.-12     	; 0x177c <__pack_f+0x148>
    1788:	0b c0       	rjmp	.+22     	; 0x17a0 <__pack_f+0x16c>
    178a:	e0 e0       	ldi	r30, 0x00	; 0
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	05 c0       	rjmp	.+10     	; 0x179a <__pack_f+0x166>
    1790:	e0 e0       	ldi	r30, 0x00	; 0
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <__pack_f+0x16c>
    1796:	ef ef       	ldi	r30, 0xFF	; 255
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	a9 01       	movw	r20, r18
    17a0:	8e 2f       	mov	r24, r30
    17a2:	87 95       	ror	r24
    17a4:	88 27       	eor	r24, r24
    17a6:	87 95       	ror	r24
    17a8:	94 2f       	mov	r25, r20
    17aa:	9f 77       	andi	r25, 0x7F	; 127
    17ac:	67 95       	ror	r22
    17ae:	66 27       	eor	r22, r22
    17b0:	67 95       	ror	r22
    17b2:	e6 95       	lsr	r30
    17b4:	e2 2e       	mov	r14, r18
    17b6:	a9 2f       	mov	r26, r25
    17b8:	a8 2b       	or	r26, r24
    17ba:	fe 2f       	mov	r31, r30
    17bc:	f6 2b       	or	r31, r22
    17be:	62 2f       	mov	r22, r18
    17c0:	73 2f       	mov	r23, r19
    17c2:	8a 2f       	mov	r24, r26
    17c4:	9f 2f       	mov	r25, r31
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	e6 e0       	ldi	r30, 0x06	; 6
    17cc:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__+0x18>

000017d0 <__unpack_f>:
    17d0:	dc 01       	movw	r26, r24
    17d2:	fb 01       	movw	r30, r22
    17d4:	2c 91       	ld	r18, X
    17d6:	11 96       	adiw	r26, 0x01	; 1
    17d8:	3c 91       	ld	r19, X
    17da:	11 97       	sbiw	r26, 0x01	; 1
    17dc:	12 96       	adiw	r26, 0x02	; 2
    17de:	8c 91       	ld	r24, X
    17e0:	12 97       	sbiw	r26, 0x02	; 2
    17e2:	48 2f       	mov	r20, r24
    17e4:	4f 77       	andi	r20, 0x7F	; 127
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	98 2f       	mov	r25, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	99 27       	eor	r25, r25
    17ee:	99 1f       	adc	r25, r25
    17f0:	13 96       	adiw	r26, 0x03	; 3
    17f2:	6c 91       	ld	r22, X
    17f4:	13 97       	sbiw	r26, 0x03	; 3
    17f6:	86 2f       	mov	r24, r22
    17f8:	88 0f       	add	r24, r24
    17fa:	89 2b       	or	r24, r25
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	66 1f       	adc	r22, r22
    1800:	66 27       	eor	r22, r22
    1802:	66 1f       	adc	r22, r22
    1804:	61 83       	std	Z+1, r22	; 0x01
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	39 f5       	brne	.+78     	; 0x1858 <__unpack_f+0x88>
    180a:	21 15       	cp	r18, r1
    180c:	31 05       	cpc	r19, r1
    180e:	41 05       	cpc	r20, r1
    1810:	51 05       	cpc	r21, r1
    1812:	11 f4       	brne	.+4      	; 0x1818 <__unpack_f+0x48>
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	29 c0       	rjmp	.+82     	; 0x186a <__unpack_f+0x9a>
    1818:	82 e8       	ldi	r24, 0x82	; 130
    181a:	9f ef       	ldi	r25, 0xFF	; 255
    181c:	93 83       	std	Z+3, r25	; 0x03
    181e:	82 83       	std	Z+2, r24	; 0x02
    1820:	67 e0       	ldi	r22, 0x07	; 7
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	44 1f       	adc	r20, r20
    1828:	55 1f       	adc	r21, r21
    182a:	6a 95       	dec	r22
    182c:	d1 f7       	brne	.-12     	; 0x1822 <__unpack_f+0x52>
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	80 83       	st	Z, r24
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <__unpack_f+0x76>
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	44 1f       	adc	r20, r20
    183a:	55 1f       	adc	r21, r21
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	93 83       	std	Z+3, r25	; 0x03
    1844:	82 83       	std	Z+2, r24	; 0x02
    1846:	20 30       	cpi	r18, 0x00	; 0
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	38 07       	cpc	r19, r24
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	48 07       	cpc	r20, r24
    1850:	80 e4       	ldi	r24, 0x40	; 64
    1852:	58 07       	cpc	r21, r24
    1854:	78 f3       	brcs	.-34     	; 0x1834 <__unpack_f+0x64>
    1856:	20 c0       	rjmp	.+64     	; 0x1898 <__unpack_f+0xc8>
    1858:	8f 3f       	cpi	r24, 0xFF	; 255
    185a:	91 05       	cpc	r25, r1
    185c:	79 f4       	brne	.+30     	; 0x187c <__unpack_f+0xac>
    185e:	21 15       	cp	r18, r1
    1860:	31 05       	cpc	r19, r1
    1862:	41 05       	cpc	r20, r1
    1864:	51 05       	cpc	r21, r1
    1866:	19 f4       	brne	.+6      	; 0x186e <__unpack_f+0x9e>
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	80 83       	st	Z, r24
    186c:	08 95       	ret
    186e:	44 ff       	sbrs	r20, 4
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <__unpack_f+0xa8>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 83       	st	Z, r24
    1876:	10 c0       	rjmp	.+32     	; 0x1898 <__unpack_f+0xc8>
    1878:	10 82       	st	Z, r1
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <__unpack_f+0xc8>
    187c:	8f 57       	subi	r24, 0x7F	; 127
    187e:	90 40       	sbci	r25, 0x00	; 0
    1880:	93 83       	std	Z+3, r25	; 0x03
    1882:	82 83       	std	Z+2, r24	; 0x02
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	80 83       	st	Z, r24
    1888:	87 e0       	ldi	r24, 0x07	; 7
    188a:	22 0f       	add	r18, r18
    188c:	33 1f       	adc	r19, r19
    188e:	44 1f       	adc	r20, r20
    1890:	55 1f       	adc	r21, r21
    1892:	8a 95       	dec	r24
    1894:	d1 f7       	brne	.-12     	; 0x188a <__unpack_f+0xba>
    1896:	50 64       	ori	r21, 0x40	; 64
    1898:	24 83       	std	Z+4, r18	; 0x04
    189a:	35 83       	std	Z+5, r19	; 0x05
    189c:	46 83       	std	Z+6, r20	; 0x06
    189e:	57 83       	std	Z+7, r21	; 0x07
    18a0:	08 95       	ret

000018a2 <__fpcmp_parts_f>:
    18a2:	fc 01       	movw	r30, r24
    18a4:	db 01       	movw	r26, r22
    18a6:	90 81       	ld	r25, Z
    18a8:	92 30       	cpi	r25, 0x02	; 2
    18aa:	08 f4       	brcc	.+2      	; 0x18ae <__fpcmp_parts_f+0xc>
    18ac:	49 c0       	rjmp	.+146    	; 0x1940 <__fpcmp_parts_f+0x9e>
    18ae:	8c 91       	ld	r24, X
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	08 f4       	brcc	.+2      	; 0x18b6 <__fpcmp_parts_f+0x14>
    18b4:	45 c0       	rjmp	.+138    	; 0x1940 <__fpcmp_parts_f+0x9e>
    18b6:	94 30       	cpi	r25, 0x04	; 4
    18b8:	51 f4       	brne	.+20     	; 0x18ce <__fpcmp_parts_f+0x2c>
    18ba:	61 81       	ldd	r22, Z+1	; 0x01
    18bc:	84 30       	cpi	r24, 0x04	; 4
    18be:	b1 f5       	brne	.+108    	; 0x192c <__fpcmp_parts_f+0x8a>
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	2c 91       	ld	r18, X
    18c4:	11 97       	sbiw	r26, 0x01	; 1
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	26 1b       	sub	r18, r22
    18ca:	31 09       	sbc	r19, r1
    18cc:	41 c0       	rjmp	.+130    	; 0x1950 <__fpcmp_parts_f+0xae>
    18ce:	84 30       	cpi	r24, 0x04	; 4
    18d0:	21 f0       	breq	.+8      	; 0x18da <__fpcmp_parts_f+0x38>
    18d2:	92 30       	cpi	r25, 0x02	; 2
    18d4:	41 f4       	brne	.+16     	; 0x18e6 <__fpcmp_parts_f+0x44>
    18d6:	82 30       	cpi	r24, 0x02	; 2
    18d8:	b1 f1       	breq	.+108    	; 0x1946 <__fpcmp_parts_f+0xa4>
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	8c 91       	ld	r24, X
    18de:	11 97       	sbiw	r26, 0x01	; 1
    18e0:	88 23       	and	r24, r24
    18e2:	a1 f1       	breq	.+104    	; 0x194c <__fpcmp_parts_f+0xaa>
    18e4:	2d c0       	rjmp	.+90     	; 0x1940 <__fpcmp_parts_f+0x9e>
    18e6:	61 81       	ldd	r22, Z+1	; 0x01
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	01 f1       	breq	.+64     	; 0x192c <__fpcmp_parts_f+0x8a>
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	8c 91       	ld	r24, X
    18f0:	11 97       	sbiw	r26, 0x01	; 1
    18f2:	68 17       	cp	r22, r24
    18f4:	d9 f4       	brne	.+54     	; 0x192c <__fpcmp_parts_f+0x8a>
    18f6:	22 81       	ldd	r18, Z+2	; 0x02
    18f8:	33 81       	ldd	r19, Z+3	; 0x03
    18fa:	12 96       	adiw	r26, 0x02	; 2
    18fc:	8d 91       	ld	r24, X+
    18fe:	9c 91       	ld	r25, X
    1900:	13 97       	sbiw	r26, 0x03	; 3
    1902:	82 17       	cp	r24, r18
    1904:	93 07       	cpc	r25, r19
    1906:	94 f0       	brlt	.+36     	; 0x192c <__fpcmp_parts_f+0x8a>
    1908:	28 17       	cp	r18, r24
    190a:	39 07       	cpc	r19, r25
    190c:	bc f0       	brlt	.+46     	; 0x193c <__fpcmp_parts_f+0x9a>
    190e:	24 81       	ldd	r18, Z+4	; 0x04
    1910:	35 81       	ldd	r19, Z+5	; 0x05
    1912:	46 81       	ldd	r20, Z+6	; 0x06
    1914:	57 81       	ldd	r21, Z+7	; 0x07
    1916:	14 96       	adiw	r26, 0x04	; 4
    1918:	8d 91       	ld	r24, X+
    191a:	9d 91       	ld	r25, X+
    191c:	0d 90       	ld	r0, X+
    191e:	bc 91       	ld	r27, X
    1920:	a0 2d       	mov	r26, r0
    1922:	82 17       	cp	r24, r18
    1924:	93 07       	cpc	r25, r19
    1926:	a4 07       	cpc	r26, r20
    1928:	b5 07       	cpc	r27, r21
    192a:	18 f4       	brcc	.+6      	; 0x1932 <__fpcmp_parts_f+0x90>
    192c:	66 23       	and	r22, r22
    192e:	41 f0       	breq	.+16     	; 0x1940 <__fpcmp_parts_f+0x9e>
    1930:	0d c0       	rjmp	.+26     	; 0x194c <__fpcmp_parts_f+0xaa>
    1932:	28 17       	cp	r18, r24
    1934:	39 07       	cpc	r19, r25
    1936:	4a 07       	cpc	r20, r26
    1938:	5b 07       	cpc	r21, r27
    193a:	28 f4       	brcc	.+10     	; 0x1946 <__fpcmp_parts_f+0xa4>
    193c:	66 23       	and	r22, r22
    193e:	31 f0       	breq	.+12     	; 0x194c <__fpcmp_parts_f+0xaa>
    1940:	21 e0       	ldi	r18, 0x01	; 1
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <__fpcmp_parts_f+0xae>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <__fpcmp_parts_f+0xae>
    194c:	2f ef       	ldi	r18, 0xFF	; 255
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	c9 01       	movw	r24, r18
    1952:	08 95       	ret

00001954 <__divmodhi4>:
    1954:	97 fb       	bst	r25, 7
    1956:	09 2e       	mov	r0, r25
    1958:	07 26       	eor	r0, r23
    195a:	0a d0       	rcall	.+20     	; 0x1970 <__divmodhi4_neg1>
    195c:	77 fd       	sbrc	r23, 7
    195e:	04 d0       	rcall	.+8      	; 0x1968 <__divmodhi4_neg2>
    1960:	27 d0       	rcall	.+78     	; 0x19b0 <__udivmodhi4>
    1962:	06 d0       	rcall	.+12     	; 0x1970 <__divmodhi4_neg1>
    1964:	00 20       	and	r0, r0
    1966:	1a f4       	brpl	.+6      	; 0x196e <__divmodhi4_exit>

00001968 <__divmodhi4_neg2>:
    1968:	70 95       	com	r23
    196a:	61 95       	neg	r22
    196c:	7f 4f       	sbci	r23, 0xFF	; 255

0000196e <__divmodhi4_exit>:
    196e:	08 95       	ret

00001970 <__divmodhi4_neg1>:
    1970:	f6 f7       	brtc	.-4      	; 0x196e <__divmodhi4_exit>
    1972:	90 95       	com	r25
    1974:	81 95       	neg	r24
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	08 95       	ret

0000197a <__divmodsi4>:
    197a:	97 fb       	bst	r25, 7
    197c:	09 2e       	mov	r0, r25
    197e:	05 26       	eor	r0, r21
    1980:	0e d0       	rcall	.+28     	; 0x199e <__divmodsi4_neg1>
    1982:	57 fd       	sbrc	r21, 7
    1984:	04 d0       	rcall	.+8      	; 0x198e <__divmodsi4_neg2>
    1986:	28 d0       	rcall	.+80     	; 0x19d8 <__udivmodsi4>
    1988:	0a d0       	rcall	.+20     	; 0x199e <__divmodsi4_neg1>
    198a:	00 1c       	adc	r0, r0
    198c:	38 f4       	brcc	.+14     	; 0x199c <__divmodsi4_exit>

0000198e <__divmodsi4_neg2>:
    198e:	50 95       	com	r21
    1990:	40 95       	com	r20
    1992:	30 95       	com	r19
    1994:	21 95       	neg	r18
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	4f 4f       	sbci	r20, 0xFF	; 255
    199a:	5f 4f       	sbci	r21, 0xFF	; 255

0000199c <__divmodsi4_exit>:
    199c:	08 95       	ret

0000199e <__divmodsi4_neg1>:
    199e:	f6 f7       	brtc	.-4      	; 0x199c <__divmodsi4_exit>
    19a0:	90 95       	com	r25
    19a2:	80 95       	com	r24
    19a4:	70 95       	com	r23
    19a6:	61 95       	neg	r22
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	8f 4f       	sbci	r24, 0xFF	; 255
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	08 95       	ret

000019b0 <__udivmodhi4>:
    19b0:	aa 1b       	sub	r26, r26
    19b2:	bb 1b       	sub	r27, r27
    19b4:	51 e1       	ldi	r21, 0x11	; 17
    19b6:	07 c0       	rjmp	.+14     	; 0x19c6 <__udivmodhi4_ep>

000019b8 <__udivmodhi4_loop>:
    19b8:	aa 1f       	adc	r26, r26
    19ba:	bb 1f       	adc	r27, r27
    19bc:	a6 17       	cp	r26, r22
    19be:	b7 07       	cpc	r27, r23
    19c0:	10 f0       	brcs	.+4      	; 0x19c6 <__udivmodhi4_ep>
    19c2:	a6 1b       	sub	r26, r22
    19c4:	b7 0b       	sbc	r27, r23

000019c6 <__udivmodhi4_ep>:
    19c6:	88 1f       	adc	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	5a 95       	dec	r21
    19cc:	a9 f7       	brne	.-22     	; 0x19b8 <__udivmodhi4_loop>
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	08 95       	ret

000019d8 <__udivmodsi4>:
    19d8:	a1 e2       	ldi	r26, 0x21	; 33
    19da:	1a 2e       	mov	r1, r26
    19dc:	aa 1b       	sub	r26, r26
    19de:	bb 1b       	sub	r27, r27
    19e0:	fd 01       	movw	r30, r26
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <__udivmodsi4_ep>

000019e4 <__udivmodsi4_loop>:
    19e4:	aa 1f       	adc	r26, r26
    19e6:	bb 1f       	adc	r27, r27
    19e8:	ee 1f       	adc	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	a2 17       	cp	r26, r18
    19ee:	b3 07       	cpc	r27, r19
    19f0:	e4 07       	cpc	r30, r20
    19f2:	f5 07       	cpc	r31, r21
    19f4:	20 f0       	brcs	.+8      	; 0x19fe <__udivmodsi4_ep>
    19f6:	a2 1b       	sub	r26, r18
    19f8:	b3 0b       	sbc	r27, r19
    19fa:	e4 0b       	sbc	r30, r20
    19fc:	f5 0b       	sbc	r31, r21

000019fe <__udivmodsi4_ep>:
    19fe:	66 1f       	adc	r22, r22
    1a00:	77 1f       	adc	r23, r23
    1a02:	88 1f       	adc	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	1a 94       	dec	r1
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <__udivmodsi4_loop>
    1a0a:	60 95       	com	r22
    1a0c:	70 95       	com	r23
    1a0e:	80 95       	com	r24
    1a10:	90 95       	com	r25
    1a12:	9b 01       	movw	r18, r22
    1a14:	ac 01       	movw	r20, r24
    1a16:	bd 01       	movw	r22, r26
    1a18:	cf 01       	movw	r24, r30
    1a1a:	08 95       	ret

00001a1c <__prologue_saves__>:
    1a1c:	2f 92       	push	r2
    1a1e:	3f 92       	push	r3
    1a20:	4f 92       	push	r4
    1a22:	5f 92       	push	r5
    1a24:	6f 92       	push	r6
    1a26:	7f 92       	push	r7
    1a28:	8f 92       	push	r8
    1a2a:	9f 92       	push	r9
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	ca 1b       	sub	r28, r26
    1a46:	db 0b       	sbc	r29, r27
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	09 94       	ijmp

00001a54 <__epilogue_restores__>:
    1a54:	2a 88       	ldd	r2, Y+18	; 0x12
    1a56:	39 88       	ldd	r3, Y+17	; 0x11
    1a58:	48 88       	ldd	r4, Y+16	; 0x10
    1a5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a60:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a62:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a64:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a66:	b9 84       	ldd	r11, Y+9	; 0x09
    1a68:	c8 84       	ldd	r12, Y+8	; 0x08
    1a6a:	df 80       	ldd	r13, Y+7	; 0x07
    1a6c:	ee 80       	ldd	r14, Y+6	; 0x06
    1a6e:	fd 80       	ldd	r15, Y+5	; 0x05
    1a70:	0c 81       	ldd	r16, Y+4	; 0x04
    1a72:	1b 81       	ldd	r17, Y+3	; 0x03
    1a74:	aa 81       	ldd	r26, Y+2	; 0x02
    1a76:	b9 81       	ldd	r27, Y+1	; 0x01
    1a78:	ce 0f       	add	r28, r30
    1a7a:	d1 1d       	adc	r29, r1
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	ed 01       	movw	r28, r26
    1a88:	08 95       	ret

00001a8a <sprintf>:
    1a8a:	ae e0       	ldi	r26, 0x0E	; 14
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	eb e4       	ldi	r30, 0x4B	; 75
    1a90:	fd e0       	ldi	r31, 0x0D	; 13
    1a92:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__prologue_saves__+0x1c>
    1a96:	0d 89       	ldd	r16, Y+21	; 0x15
    1a98:	1e 89       	ldd	r17, Y+22	; 0x16
    1a9a:	86 e0       	ldi	r24, 0x06	; 6
    1a9c:	8c 83       	std	Y+4, r24	; 0x04
    1a9e:	1a 83       	std	Y+2, r17	; 0x02
    1aa0:	09 83       	std	Y+1, r16	; 0x01
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f e7       	ldi	r25, 0x7F	; 127
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	9e 01       	movw	r18, r28
    1aac:	27 5e       	subi	r18, 0xE7	; 231
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	01 96       	adiw	r24, 0x01	; 1
    1ab4:	6f 89       	ldd	r22, Y+23	; 0x17
    1ab6:	78 8d       	ldd	r23, Y+24	; 0x18
    1ab8:	a9 01       	movw	r20, r18
    1aba:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <vfprintf>
    1abe:	ef 81       	ldd	r30, Y+7	; 0x07
    1ac0:	f8 85       	ldd	r31, Y+8	; 0x08
    1ac2:	e0 0f       	add	r30, r16
    1ac4:	f1 1f       	adc	r31, r17
    1ac6:	10 82       	st	Z, r1
    1ac8:	2e 96       	adiw	r28, 0x0e	; 14
    1aca:	e4 e0       	ldi	r30, 0x04	; 4
    1acc:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__epilogue_restores__+0x1c>

00001ad0 <vfprintf>:
    1ad0:	ac e0       	ldi	r26, 0x0C	; 12
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ee e6       	ldi	r30, 0x6E	; 110
    1ad6:	fd e0       	ldi	r31, 0x0D	; 13
    1ad8:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__>
    1adc:	6c 01       	movw	r12, r24
    1ade:	1b 01       	movw	r2, r22
    1ae0:	8a 01       	movw	r16, r20
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	17 82       	std	Z+7, r1	; 0x07
    1ae6:	16 82       	std	Z+6, r1	; 0x06
    1ae8:	83 81       	ldd	r24, Z+3	; 0x03
    1aea:	81 ff       	sbrs	r24, 1
    1aec:	d1 c1       	rjmp	.+930    	; 0x1e90 <vfprintf+0x3c0>
    1aee:	2e 01       	movw	r4, r28
    1af0:	08 94       	sec
    1af2:	41 1c       	adc	r4, r1
    1af4:	51 1c       	adc	r5, r1
    1af6:	f6 01       	movw	r30, r12
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	f1 01       	movw	r30, r2
    1afc:	93 fd       	sbrc	r25, 3
    1afe:	85 91       	lpm	r24, Z+
    1b00:	93 ff       	sbrs	r25, 3
    1b02:	81 91       	ld	r24, Z+
    1b04:	1f 01       	movw	r2, r30
    1b06:	88 23       	and	r24, r24
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <vfprintf+0x3c>
    1b0a:	be c1       	rjmp	.+892    	; 0x1e88 <vfprintf+0x3b8>
    1b0c:	85 32       	cpi	r24, 0x25	; 37
    1b0e:	39 f4       	brne	.+14     	; 0x1b1e <vfprintf+0x4e>
    1b10:	93 fd       	sbrc	r25, 3
    1b12:	85 91       	lpm	r24, Z+
    1b14:	93 ff       	sbrs	r25, 3
    1b16:	81 91       	ld	r24, Z+
    1b18:	1f 01       	movw	r2, r30
    1b1a:	85 32       	cpi	r24, 0x25	; 37
    1b1c:	29 f4       	brne	.+10     	; 0x1b28 <vfprintf+0x58>
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	b6 01       	movw	r22, r12
    1b22:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1b26:	e7 cf       	rjmp	.-50     	; 0x1af6 <vfprintf+0x26>
    1b28:	ee 24       	eor	r14, r14
    1b2a:	ff 24       	eor	r15, r15
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	20 32       	cpi	r18, 0x20	; 32
    1b30:	b0 f4       	brcc	.+44     	; 0x1b5e <vfprintf+0x8e>
    1b32:	8b 32       	cpi	r24, 0x2B	; 43
    1b34:	69 f0       	breq	.+26     	; 0x1b50 <vfprintf+0x80>
    1b36:	8c 32       	cpi	r24, 0x2C	; 44
    1b38:	28 f4       	brcc	.+10     	; 0x1b44 <vfprintf+0x74>
    1b3a:	80 32       	cpi	r24, 0x20	; 32
    1b3c:	51 f0       	breq	.+20     	; 0x1b52 <vfprintf+0x82>
    1b3e:	83 32       	cpi	r24, 0x23	; 35
    1b40:	71 f4       	brne	.+28     	; 0x1b5e <vfprintf+0x8e>
    1b42:	0b c0       	rjmp	.+22     	; 0x1b5a <vfprintf+0x8a>
    1b44:	8d 32       	cpi	r24, 0x2D	; 45
    1b46:	39 f0       	breq	.+14     	; 0x1b56 <vfprintf+0x86>
    1b48:	80 33       	cpi	r24, 0x30	; 48
    1b4a:	49 f4       	brne	.+18     	; 0x1b5e <vfprintf+0x8e>
    1b4c:	21 60       	ori	r18, 0x01	; 1
    1b4e:	2c c0       	rjmp	.+88     	; 0x1ba8 <vfprintf+0xd8>
    1b50:	22 60       	ori	r18, 0x02	; 2
    1b52:	24 60       	ori	r18, 0x04	; 4
    1b54:	29 c0       	rjmp	.+82     	; 0x1ba8 <vfprintf+0xd8>
    1b56:	28 60       	ori	r18, 0x08	; 8
    1b58:	27 c0       	rjmp	.+78     	; 0x1ba8 <vfprintf+0xd8>
    1b5a:	20 61       	ori	r18, 0x10	; 16
    1b5c:	25 c0       	rjmp	.+74     	; 0x1ba8 <vfprintf+0xd8>
    1b5e:	27 fd       	sbrc	r18, 7
    1b60:	2c c0       	rjmp	.+88     	; 0x1bba <vfprintf+0xea>
    1b62:	38 2f       	mov	r19, r24
    1b64:	30 53       	subi	r19, 0x30	; 48
    1b66:	3a 30       	cpi	r19, 0x0A	; 10
    1b68:	98 f4       	brcc	.+38     	; 0x1b90 <vfprintf+0xc0>
    1b6a:	26 ff       	sbrs	r18, 6
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <vfprintf+0xae>
    1b6e:	8e 2d       	mov	r24, r14
    1b70:	88 0f       	add	r24, r24
    1b72:	e8 2e       	mov	r14, r24
    1b74:	ee 0c       	add	r14, r14
    1b76:	ee 0c       	add	r14, r14
    1b78:	e8 0e       	add	r14, r24
    1b7a:	e3 0e       	add	r14, r19
    1b7c:	15 c0       	rjmp	.+42     	; 0x1ba8 <vfprintf+0xd8>
    1b7e:	8f 2d       	mov	r24, r15
    1b80:	88 0f       	add	r24, r24
    1b82:	f8 2e       	mov	r15, r24
    1b84:	ff 0c       	add	r15, r15
    1b86:	ff 0c       	add	r15, r15
    1b88:	f8 0e       	add	r15, r24
    1b8a:	f3 0e       	add	r15, r19
    1b8c:	20 62       	ori	r18, 0x20	; 32
    1b8e:	0c c0       	rjmp	.+24     	; 0x1ba8 <vfprintf+0xd8>
    1b90:	8e 32       	cpi	r24, 0x2E	; 46
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <vfprintf+0xcc>
    1b94:	26 fd       	sbrc	r18, 6
    1b96:	78 c1       	rjmp	.+752    	; 0x1e88 <vfprintf+0x3b8>
    1b98:	20 64       	ori	r18, 0x40	; 64
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <vfprintf+0xd8>
    1b9c:	8c 36       	cpi	r24, 0x6C	; 108
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <vfprintf+0xd4>
    1ba0:	20 68       	ori	r18, 0x80	; 128
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vfprintf+0xd8>
    1ba4:	88 36       	cpi	r24, 0x68	; 104
    1ba6:	49 f4       	brne	.+18     	; 0x1bba <vfprintf+0xea>
    1ba8:	f1 01       	movw	r30, r2
    1baa:	93 fd       	sbrc	r25, 3
    1bac:	85 91       	lpm	r24, Z+
    1bae:	93 ff       	sbrs	r25, 3
    1bb0:	81 91       	ld	r24, Z+
    1bb2:	1f 01       	movw	r2, r30
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <vfprintf+0xea>
    1bb8:	ba cf       	rjmp	.-140    	; 0x1b2e <vfprintf+0x5e>
    1bba:	98 2f       	mov	r25, r24
    1bbc:	95 54       	subi	r25, 0x45	; 69
    1bbe:	93 30       	cpi	r25, 0x03	; 3
    1bc0:	18 f0       	brcs	.+6      	; 0x1bc8 <vfprintf+0xf8>
    1bc2:	90 52       	subi	r25, 0x20	; 32
    1bc4:	93 30       	cpi	r25, 0x03	; 3
    1bc6:	28 f4       	brcc	.+10     	; 0x1bd2 <vfprintf+0x102>
    1bc8:	0c 5f       	subi	r16, 0xFC	; 252
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	ff e3       	ldi	r31, 0x3F	; 63
    1bce:	f9 83       	std	Y+1, r31	; 0x01
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <vfprintf+0x11c>
    1bd2:	83 36       	cpi	r24, 0x63	; 99
    1bd4:	31 f0       	breq	.+12     	; 0x1be2 <vfprintf+0x112>
    1bd6:	83 37       	cpi	r24, 0x73	; 115
    1bd8:	71 f0       	breq	.+28     	; 0x1bf6 <vfprintf+0x126>
    1bda:	83 35       	cpi	r24, 0x53	; 83
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <vfprintf+0x110>
    1bde:	60 c0       	rjmp	.+192    	; 0x1ca0 <vfprintf+0x1d0>
    1be0:	22 c0       	rjmp	.+68     	; 0x1c26 <vfprintf+0x156>
    1be2:	f8 01       	movw	r30, r16
    1be4:	80 81       	ld	r24, Z
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	0e 5f       	subi	r16, 0xFE	; 254
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	42 01       	movw	r8, r4
    1bee:	71 e0       	ldi	r23, 0x01	; 1
    1bf0:	a7 2e       	mov	r10, r23
    1bf2:	b1 2c       	mov	r11, r1
    1bf4:	16 c0       	rjmp	.+44     	; 0x1c22 <vfprintf+0x152>
    1bf6:	62 e0       	ldi	r22, 0x02	; 2
    1bf8:	66 2e       	mov	r6, r22
    1bfa:	71 2c       	mov	r7, r1
    1bfc:	60 0e       	add	r6, r16
    1bfe:	71 1e       	adc	r7, r17
    1c00:	f8 01       	movw	r30, r16
    1c02:	80 80       	ld	r8, Z
    1c04:	91 80       	ldd	r9, Z+1	; 0x01
    1c06:	26 ff       	sbrs	r18, 6
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <vfprintf+0x140>
    1c0a:	6e 2d       	mov	r22, r14
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <vfprintf+0x144>
    1c10:	6f ef       	ldi	r22, 0xFF	; 255
    1c12:	7f ef       	ldi	r23, 0xFF	; 255
    1c14:	c4 01       	movw	r24, r8
    1c16:	2c 87       	std	Y+12, r18	; 0x0c
    1c18:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <strnlen>
    1c1c:	5c 01       	movw	r10, r24
    1c1e:	83 01       	movw	r16, r6
    1c20:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c22:	2f 77       	andi	r18, 0x7F	; 127
    1c24:	17 c0       	rjmp	.+46     	; 0x1c54 <vfprintf+0x184>
    1c26:	52 e0       	ldi	r21, 0x02	; 2
    1c28:	65 2e       	mov	r6, r21
    1c2a:	71 2c       	mov	r7, r1
    1c2c:	60 0e       	add	r6, r16
    1c2e:	71 1e       	adc	r7, r17
    1c30:	f8 01       	movw	r30, r16
    1c32:	80 80       	ld	r8, Z
    1c34:	91 80       	ldd	r9, Z+1	; 0x01
    1c36:	26 ff       	sbrs	r18, 6
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <vfprintf+0x170>
    1c3a:	6e 2d       	mov	r22, r14
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <vfprintf+0x174>
    1c40:	6f ef       	ldi	r22, 0xFF	; 255
    1c42:	7f ef       	ldi	r23, 0xFF	; 255
    1c44:	c4 01       	movw	r24, r8
    1c46:	2c 87       	std	Y+12, r18	; 0x0c
    1c48:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strnlen_P>
    1c4c:	5c 01       	movw	r10, r24
    1c4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c50:	20 68       	ori	r18, 0x80	; 128
    1c52:	83 01       	movw	r16, r6
    1c54:	23 fd       	sbrc	r18, 3
    1c56:	20 c0       	rjmp	.+64     	; 0x1c98 <vfprintf+0x1c8>
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <vfprintf+0x19a>
    1c5a:	80 e2       	ldi	r24, 0x20	; 32
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	b6 01       	movw	r22, r12
    1c60:	2c 87       	std	Y+12, r18	; 0x0c
    1c62:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1c66:	fa 94       	dec	r15
    1c68:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c6a:	8f 2d       	mov	r24, r15
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a8 16       	cp	r10, r24
    1c70:	b9 06       	cpc	r11, r25
    1c72:	98 f3       	brcs	.-26     	; 0x1c5a <vfprintf+0x18a>
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <vfprintf+0x1c8>
    1c76:	f4 01       	movw	r30, r8
    1c78:	27 fd       	sbrc	r18, 7
    1c7a:	85 91       	lpm	r24, Z+
    1c7c:	27 ff       	sbrs	r18, 7
    1c7e:	81 91       	ld	r24, Z+
    1c80:	4f 01       	movw	r8, r30
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	b6 01       	movw	r22, r12
    1c86:	2c 87       	std	Y+12, r18	; 0x0c
    1c88:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1c8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c8e:	f1 10       	cpse	r15, r1
    1c90:	fa 94       	dec	r15
    1c92:	08 94       	sec
    1c94:	a1 08       	sbc	r10, r1
    1c96:	b1 08       	sbc	r11, r1
    1c98:	a1 14       	cp	r10, r1
    1c9a:	b1 04       	cpc	r11, r1
    1c9c:	61 f7       	brne	.-40     	; 0x1c76 <vfprintf+0x1a6>
    1c9e:	f1 c0       	rjmp	.+482    	; 0x1e82 <vfprintf+0x3b2>
    1ca0:	84 36       	cpi	r24, 0x64	; 100
    1ca2:	11 f0       	breq	.+4      	; 0x1ca8 <vfprintf+0x1d8>
    1ca4:	89 36       	cpi	r24, 0x69	; 105
    1ca6:	49 f5       	brne	.+82     	; 0x1cfa <vfprintf+0x22a>
    1ca8:	27 ff       	sbrs	r18, 7
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <vfprintf+0x1ec>
    1cac:	f8 01       	movw	r30, r16
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	0c 5f       	subi	r16, 0xFC	; 252
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	09 c0       	rjmp	.+18     	; 0x1cce <vfprintf+0x1fe>
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	88 27       	eor	r24, r24
    1cc4:	77 fd       	sbrc	r23, 7
    1cc6:	80 95       	com	r24
    1cc8:	98 2f       	mov	r25, r24
    1cca:	0e 5f       	subi	r16, 0xFE	; 254
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	4f e6       	ldi	r20, 0x6F	; 111
    1cd0:	b4 2e       	mov	r11, r20
    1cd2:	b2 22       	and	r11, r18
    1cd4:	97 ff       	sbrs	r25, 7
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <vfprintf+0x21a>
    1cd8:	90 95       	com	r25
    1cda:	80 95       	com	r24
    1cdc:	70 95       	com	r23
    1cde:	61 95       	neg	r22
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	f0 e8       	ldi	r31, 0x80	; 128
    1ce8:	bf 2a       	or	r11, r31
    1cea:	a2 01       	movw	r20, r4
    1cec:	2a e0       	ldi	r18, 0x0A	; 10
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__ultoa_invert>
    1cf4:	78 2e       	mov	r7, r24
    1cf6:	74 18       	sub	r7, r4
    1cf8:	45 c0       	rjmp	.+138    	; 0x1d84 <vfprintf+0x2b4>
    1cfa:	85 37       	cpi	r24, 0x75	; 117
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <vfprintf+0x23a>
    1cfe:	3f ee       	ldi	r19, 0xEF	; 239
    1d00:	b3 2e       	mov	r11, r19
    1d02:	b2 22       	and	r11, r18
    1d04:	2a e0       	ldi	r18, 0x0A	; 10
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	25 c0       	rjmp	.+74     	; 0x1d54 <vfprintf+0x284>
    1d0a:	99 ef       	ldi	r25, 0xF9	; 249
    1d0c:	b9 2e       	mov	r11, r25
    1d0e:	b2 22       	and	r11, r18
    1d10:	8f 36       	cpi	r24, 0x6F	; 111
    1d12:	c1 f0       	breq	.+48     	; 0x1d44 <vfprintf+0x274>
    1d14:	80 37       	cpi	r24, 0x70	; 112
    1d16:	20 f4       	brcc	.+8      	; 0x1d20 <vfprintf+0x250>
    1d18:	88 35       	cpi	r24, 0x58	; 88
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <vfprintf+0x24e>
    1d1c:	b5 c0       	rjmp	.+362    	; 0x1e88 <vfprintf+0x3b8>
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <vfprintf+0x26a>
    1d20:	80 37       	cpi	r24, 0x70	; 112
    1d22:	21 f0       	breq	.+8      	; 0x1d2c <vfprintf+0x25c>
    1d24:	88 37       	cpi	r24, 0x78	; 120
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <vfprintf+0x25a>
    1d28:	af c0       	rjmp	.+350    	; 0x1e88 <vfprintf+0x3b8>
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x260>
    1d2c:	20 e1       	ldi	r18, 0x10	; 16
    1d2e:	b2 2a       	or	r11, r18
    1d30:	b4 fe       	sbrs	r11, 4
    1d32:	0b c0       	rjmp	.+22     	; 0x1d4a <vfprintf+0x27a>
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	b8 2a       	or	r11, r24
    1d38:	08 c0       	rjmp	.+16     	; 0x1d4a <vfprintf+0x27a>
    1d3a:	b4 fe       	sbrs	r11, 4
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <vfprintf+0x280>
    1d3e:	e6 e0       	ldi	r30, 0x06	; 6
    1d40:	be 2a       	or	r11, r30
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <vfprintf+0x280>
    1d44:	28 e0       	ldi	r18, 0x08	; 8
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <vfprintf+0x284>
    1d4a:	20 e1       	ldi	r18, 0x10	; 16
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <vfprintf+0x284>
    1d50:	20 e1       	ldi	r18, 0x10	; 16
    1d52:	32 e0       	ldi	r19, 0x02	; 2
    1d54:	b7 fe       	sbrs	r11, 7
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <vfprintf+0x298>
    1d58:	f8 01       	movw	r30, r16
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	0c 5f       	subi	r16, 0xFC	; 252
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <vfprintf+0x2a6>
    1d68:	f8 01       	movw	r30, r16
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 5f       	subi	r16, 0xFE	; 254
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	a2 01       	movw	r20, r4
    1d78:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__ultoa_invert>
    1d7c:	78 2e       	mov	r7, r24
    1d7e:	74 18       	sub	r7, r4
    1d80:	ff e7       	ldi	r31, 0x7F	; 127
    1d82:	bf 22       	and	r11, r31
    1d84:	b6 fe       	sbrs	r11, 6
    1d86:	0b c0       	rjmp	.+22     	; 0x1d9e <vfprintf+0x2ce>
    1d88:	2e ef       	ldi	r18, 0xFE	; 254
    1d8a:	b2 22       	and	r11, r18
    1d8c:	7e 14       	cp	r7, r14
    1d8e:	38 f4       	brcc	.+14     	; 0x1d9e <vfprintf+0x2ce>
    1d90:	b4 fe       	sbrs	r11, 4
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <vfprintf+0x2d2>
    1d94:	b2 fc       	sbrc	r11, 2
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <vfprintf+0x2d2>
    1d98:	8f ee       	ldi	r24, 0xEF	; 239
    1d9a:	b8 22       	and	r11, r24
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vfprintf+0x2d2>
    1d9e:	a7 2c       	mov	r10, r7
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <vfprintf+0x2d4>
    1da2:	ae 2c       	mov	r10, r14
    1da4:	8b 2d       	mov	r24, r11
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	b4 fe       	sbrs	r11, 4
    1daa:	0d c0       	rjmp	.+26     	; 0x1dc6 <vfprintf+0x2f6>
    1dac:	fe 01       	movw	r30, r28
    1dae:	e7 0d       	add	r30, r7
    1db0:	f1 1d       	adc	r31, r1
    1db2:	20 81       	ld	r18, Z
    1db4:	20 33       	cpi	r18, 0x30	; 48
    1db6:	19 f4       	brne	.+6      	; 0x1dbe <vfprintf+0x2ee>
    1db8:	e9 ee       	ldi	r30, 0xE9	; 233
    1dba:	be 22       	and	r11, r30
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <vfprintf+0x300>
    1dbe:	a3 94       	inc	r10
    1dc0:	b2 fe       	sbrs	r11, 2
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <vfprintf+0x300>
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <vfprintf+0x2fe>
    1dc6:	86 78       	andi	r24, 0x86	; 134
    1dc8:	90 70       	andi	r25, 0x00	; 0
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <vfprintf+0x300>
    1dce:	a3 94       	inc	r10
    1dd0:	8b 2c       	mov	r8, r11
    1dd2:	99 24       	eor	r9, r9
    1dd4:	b3 fc       	sbrc	r11, 3
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <vfprintf+0x330>
    1dd8:	b0 fe       	sbrs	r11, 0
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <vfprintf+0x32a>
    1ddc:	af 14       	cp	r10, r15
    1dde:	28 f4       	brcc	.+10     	; 0x1dea <vfprintf+0x31a>
    1de0:	e7 2c       	mov	r14, r7
    1de2:	ef 0c       	add	r14, r15
    1de4:	ea 18       	sub	r14, r10
    1de6:	af 2c       	mov	r10, r15
    1de8:	08 c0       	rjmp	.+16     	; 0x1dfa <vfprintf+0x32a>
    1dea:	e7 2c       	mov	r14, r7
    1dec:	06 c0       	rjmp	.+12     	; 0x1dfa <vfprintf+0x32a>
    1dee:	80 e2       	ldi	r24, 0x20	; 32
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	b6 01       	movw	r22, r12
    1df4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1df8:	a3 94       	inc	r10
    1dfa:	af 14       	cp	r10, r15
    1dfc:	c0 f3       	brcs	.-16     	; 0x1dee <vfprintf+0x31e>
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <vfprintf+0x338>
    1e00:	af 14       	cp	r10, r15
    1e02:	10 f4       	brcc	.+4      	; 0x1e08 <vfprintf+0x338>
    1e04:	fa 18       	sub	r15, r10
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <vfprintf+0x33a>
    1e08:	ff 24       	eor	r15, r15
    1e0a:	84 fe       	sbrs	r8, 4
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <vfprintf+0x35c>
    1e0e:	80 e3       	ldi	r24, 0x30	; 48
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	b6 01       	movw	r22, r12
    1e14:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1e18:	82 fe       	sbrs	r8, 2
    1e1a:	1f c0       	rjmp	.+62     	; 0x1e5a <vfprintf+0x38a>
    1e1c:	81 fe       	sbrs	r8, 1
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <vfprintf+0x356>
    1e20:	88 e5       	ldi	r24, 0x58	; 88
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	10 c0       	rjmp	.+32     	; 0x1e46 <vfprintf+0x376>
    1e26:	88 e7       	ldi	r24, 0x78	; 120
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0d c0       	rjmp	.+26     	; 0x1e46 <vfprintf+0x376>
    1e2c:	c4 01       	movw	r24, r8
    1e2e:	86 78       	andi	r24, 0x86	; 134
    1e30:	90 70       	andi	r25, 0x00	; 0
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	91 f0       	breq	.+36     	; 0x1e5a <vfprintf+0x38a>
    1e36:	81 fc       	sbrc	r8, 1
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <vfprintf+0x36e>
    1e3a:	80 e2       	ldi	r24, 0x20	; 32
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <vfprintf+0x370>
    1e3e:	8b e2       	ldi	r24, 0x2B	; 43
    1e40:	b7 fc       	sbrc	r11, 7
    1e42:	8d e2       	ldi	r24, 0x2D	; 45
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	b6 01       	movw	r22, r12
    1e48:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <vfprintf+0x38a>
    1e4e:	80 e3       	ldi	r24, 0x30	; 48
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	b6 01       	movw	r22, r12
    1e54:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1e58:	ea 94       	dec	r14
    1e5a:	7e 14       	cp	r7, r14
    1e5c:	c0 f3       	brcs	.-16     	; 0x1e4e <vfprintf+0x37e>
    1e5e:	7a 94       	dec	r7
    1e60:	f2 01       	movw	r30, r4
    1e62:	e7 0d       	add	r30, r7
    1e64:	f1 1d       	adc	r31, r1
    1e66:	80 81       	ld	r24, Z
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	b6 01       	movw	r22, r12
    1e6c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1e70:	77 20       	and	r7, r7
    1e72:	a9 f7       	brne	.-22     	; 0x1e5e <vfprintf+0x38e>
    1e74:	06 c0       	rjmp	.+12     	; 0x1e82 <vfprintf+0x3b2>
    1e76:	80 e2       	ldi	r24, 0x20	; 32
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	b6 01       	movw	r22, r12
    1e7c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <fputc>
    1e80:	fa 94       	dec	r15
    1e82:	ff 20       	and	r15, r15
    1e84:	c1 f7       	brne	.-16     	; 0x1e76 <vfprintf+0x3a6>
    1e86:	37 ce       	rjmp	.-914    	; 0x1af6 <vfprintf+0x26>
    1e88:	f6 01       	movw	r30, r12
    1e8a:	26 81       	ldd	r18, Z+6	; 0x06
    1e8c:	37 81       	ldd	r19, Z+7	; 0x07
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0x3c4>
    1e90:	2f ef       	ldi	r18, 0xFF	; 255
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	c9 01       	movw	r24, r18
    1e96:	2c 96       	adiw	r28, 0x0c	; 12
    1e98:	e2 e1       	ldi	r30, 0x12	; 18
    1e9a:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__>

00001e9e <strnlen_P>:
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	05 90       	lpm	r0, Z+
    1ea2:	61 50       	subi	r22, 0x01	; 1
    1ea4:	70 40       	sbci	r23, 0x00	; 0
    1ea6:	01 10       	cpse	r0, r1
    1ea8:	d8 f7       	brcc	.-10     	; 0x1ea0 <strnlen_P+0x2>
    1eaa:	80 95       	com	r24
    1eac:	90 95       	com	r25
    1eae:	8e 0f       	add	r24, r30
    1eb0:	9f 1f       	adc	r25, r31
    1eb2:	08 95       	ret

00001eb4 <strnlen>:
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	61 50       	subi	r22, 0x01	; 1
    1eb8:	70 40       	sbci	r23, 0x00	; 0
    1eba:	01 90       	ld	r0, Z+
    1ebc:	01 10       	cpse	r0, r1
    1ebe:	d8 f7       	brcc	.-10     	; 0x1eb6 <strnlen+0x2>
    1ec0:	80 95       	com	r24
    1ec2:	90 95       	com	r25
    1ec4:	8e 0f       	add	r24, r30
    1ec6:	9f 1f       	adc	r25, r31
    1ec8:	08 95       	ret

00001eca <fputc>:
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	8c 01       	movw	r16, r24
    1ed4:	eb 01       	movw	r28, r22
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	81 ff       	sbrs	r24, 1
    1eda:	1b c0       	rjmp	.+54     	; 0x1f12 <fputc+0x48>
    1edc:	82 ff       	sbrs	r24, 2
    1ede:	0d c0       	rjmp	.+26     	; 0x1efa <fputc+0x30>
    1ee0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ee2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee8:	28 17       	cp	r18, r24
    1eea:	39 07       	cpc	r19, r25
    1eec:	64 f4       	brge	.+24     	; 0x1f06 <fputc+0x3c>
    1eee:	e8 81       	ld	r30, Y
    1ef0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef2:	01 93       	st	Z+, r16
    1ef4:	f9 83       	std	Y+1, r31	; 0x01
    1ef6:	e8 83       	st	Y, r30
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <fputc+0x3c>
    1efa:	e8 85       	ldd	r30, Y+8	; 0x08
    1efc:	f9 85       	ldd	r31, Y+9	; 0x09
    1efe:	80 2f       	mov	r24, r16
    1f00:	09 95       	icall
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	31 f4       	brne	.+12     	; 0x1f12 <fputc+0x48>
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	9f 83       	std	Y+7, r25	; 0x07
    1f0e:	8e 83       	std	Y+6, r24	; 0x06
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <fputc+0x4c>
    1f12:	0f ef       	ldi	r16, 0xFF	; 255
    1f14:	1f ef       	ldi	r17, 0xFF	; 255
    1f16:	c8 01       	movw	r24, r16
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <__ultoa_invert>:
    1f22:	fa 01       	movw	r30, r20
    1f24:	aa 27       	eor	r26, r26
    1f26:	28 30       	cpi	r18, 0x08	; 8
    1f28:	51 f1       	breq	.+84     	; 0x1f7e <__ultoa_invert+0x5c>
    1f2a:	20 31       	cpi	r18, 0x10	; 16
    1f2c:	81 f1       	breq	.+96     	; 0x1f8e <__ultoa_invert+0x6c>
    1f2e:	e8 94       	clt
    1f30:	6f 93       	push	r22
    1f32:	6e 7f       	andi	r22, 0xFE	; 254
    1f34:	6e 5f       	subi	r22, 0xFE	; 254
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3c:	af 4f       	sbci	r26, 0xFF	; 255
    1f3e:	b1 e0       	ldi	r27, 0x01	; 1
    1f40:	3e d0       	rcall	.+124    	; 0x1fbe <__ultoa_invert+0x9c>
    1f42:	b4 e0       	ldi	r27, 0x04	; 4
    1f44:	3c d0       	rcall	.+120    	; 0x1fbe <__ultoa_invert+0x9c>
    1f46:	67 0f       	add	r22, r23
    1f48:	78 1f       	adc	r23, r24
    1f4a:	89 1f       	adc	r24, r25
    1f4c:	9a 1f       	adc	r25, r26
    1f4e:	a1 1d       	adc	r26, r1
    1f50:	68 0f       	add	r22, r24
    1f52:	79 1f       	adc	r23, r25
    1f54:	8a 1f       	adc	r24, r26
    1f56:	91 1d       	adc	r25, r1
    1f58:	a1 1d       	adc	r26, r1
    1f5a:	6a 0f       	add	r22, r26
    1f5c:	71 1d       	adc	r23, r1
    1f5e:	81 1d       	adc	r24, r1
    1f60:	91 1d       	adc	r25, r1
    1f62:	a1 1d       	adc	r26, r1
    1f64:	20 d0       	rcall	.+64     	; 0x1fa6 <__ultoa_invert+0x84>
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <__ultoa_invert+0x48>
    1f68:	68 94       	set
    1f6a:	3f 91       	pop	r19
    1f6c:	2a e0       	ldi	r18, 0x0A	; 10
    1f6e:	26 9f       	mul	r18, r22
    1f70:	11 24       	eor	r1, r1
    1f72:	30 19       	sub	r19, r0
    1f74:	30 5d       	subi	r19, 0xD0	; 208
    1f76:	31 93       	st	Z+, r19
    1f78:	de f6       	brtc	.-74     	; 0x1f30 <__ultoa_invert+0xe>
    1f7a:	cf 01       	movw	r24, r30
    1f7c:	08 95       	ret
    1f7e:	46 2f       	mov	r20, r22
    1f80:	47 70       	andi	r20, 0x07	; 7
    1f82:	40 5d       	subi	r20, 0xD0	; 208
    1f84:	41 93       	st	Z+, r20
    1f86:	b3 e0       	ldi	r27, 0x03	; 3
    1f88:	0f d0       	rcall	.+30     	; 0x1fa8 <__ultoa_invert+0x86>
    1f8a:	c9 f7       	brne	.-14     	; 0x1f7e <__ultoa_invert+0x5c>
    1f8c:	f6 cf       	rjmp	.-20     	; 0x1f7a <__ultoa_invert+0x58>
    1f8e:	46 2f       	mov	r20, r22
    1f90:	4f 70       	andi	r20, 0x0F	; 15
    1f92:	40 5d       	subi	r20, 0xD0	; 208
    1f94:	4a 33       	cpi	r20, 0x3A	; 58
    1f96:	18 f0       	brcs	.+6      	; 0x1f9e <__ultoa_invert+0x7c>
    1f98:	49 5d       	subi	r20, 0xD9	; 217
    1f9a:	31 fd       	sbrc	r19, 1
    1f9c:	40 52       	subi	r20, 0x20	; 32
    1f9e:	41 93       	st	Z+, r20
    1fa0:	02 d0       	rcall	.+4      	; 0x1fa6 <__ultoa_invert+0x84>
    1fa2:	a9 f7       	brne	.-22     	; 0x1f8e <__ultoa_invert+0x6c>
    1fa4:	ea cf       	rjmp	.-44     	; 0x1f7a <__ultoa_invert+0x58>
    1fa6:	b4 e0       	ldi	r27, 0x04	; 4
    1fa8:	a6 95       	lsr	r26
    1faa:	97 95       	ror	r25
    1fac:	87 95       	ror	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	ba 95       	dec	r27
    1fb4:	c9 f7       	brne	.-14     	; 0x1fa8 <__ultoa_invert+0x86>
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	61 05       	cpc	r22, r1
    1fba:	71 05       	cpc	r23, r1
    1fbc:	08 95       	ret
    1fbe:	9b 01       	movw	r18, r22
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	0a 2e       	mov	r0, r26
    1fc4:	06 94       	lsr	r0
    1fc6:	57 95       	ror	r21
    1fc8:	47 95       	ror	r20
    1fca:	37 95       	ror	r19
    1fcc:	27 95       	ror	r18
    1fce:	ba 95       	dec	r27
    1fd0:	c9 f7       	brne	.-14     	; 0x1fc4 <__ultoa_invert+0xa2>
    1fd2:	62 0f       	add	r22, r18
    1fd4:	73 1f       	adc	r23, r19
    1fd6:	84 1f       	adc	r24, r20
    1fd8:	95 1f       	adc	r25, r21
    1fda:	a0 1d       	adc	r26, r0
    1fdc:	08 95       	ret

00001fde <_exit>:
    1fde:	f8 94       	cli

00001fe0 <__stop_program>:
    1fe0:	ff cf       	rjmp	.-2      	; 0x1fe0 <__stop_program>
